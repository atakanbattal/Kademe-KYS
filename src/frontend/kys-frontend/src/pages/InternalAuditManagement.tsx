import React, { useState, useEffect } from 'react';
// TypeScript re-analysis force
import {
  Box,
  Typography,
  Paper,
  Card,
  CardContent,
  CardHeader,
  Button,
  Tab,
  Tabs,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ListItemIcon,
  Chip,
  Avatar,
  Snackbar,
  useTheme,
  useMediaQuery,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  IconButton,
  Tooltip,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  LinearProgress,
  Badge,
  Divider,
  FormControlLabel,
  Checkbox,
  RadioGroup,
  Radio,
  Alert,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  OutlinedInput,
  InputAdornment,
  ListSubheader,
  Switch,
  Autocomplete
} from '@mui/material';

import {
  Add as AddIcon,
  Assignment as AuditIcon,
  Schedule as ScheduleIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  WarningAmber as WarningAmberIcon,
  TrendingUp as TrendingUpIcon,
  ShowChart as ShowChartIcon,
  Dashboard as DashboardIcon,
  Report as ReportIcon,
  Settings as SettingsIcon,
  Tune as TuneIcon,
  Timeline as TimelineIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  GetApp as ExportIcon,
  Person as PersonIcon,
  Business as BusinessIcon,
  CalendarToday as CalendarIcon,
  Event as EventIcon,
  FilterList as FilterIcon,
  Search as SearchIcon,
  AttachFile as AttachIcon,
  Camera as CameraIcon,
  Verified as VerifiedIcon,
  PendingActions as PendingIcon,
  AccessTime as ClockIcon,
  Star as StarIcon,
  ExpandMore as ExpandMoreIcon,
  Close as CloseIcon,
  Save as SaveIcon,
  Email as EmailIcon,
  Print as PrintIcon,
  BusinessCenter as DepartmentIcon,
  Description as DescriptionIcon,
  DateRange as DateRangeIcon,
  Group as TeamIcon,
  Assignment as ProcessIcon,
  Security as StandardIcon,
  Flag as PriorityIcon,
  Numbers as NumbersIcon,
  Category as CategoryIcon,
  Article as ArticleIcon,
  Assignment as AssignmentIcon,
  FindInPage as FindInPageIcon,
  LocationOn as LocationOnIcon,
  // Yeni icon'lar - Soru Listesi Sistemi i√ßin
  Quiz as QuizIcon,
  QuestionAnswer as QuestionIcon,
  Checklist as ChecklistIcon,
  PlaylistAddCheck as PlaylistIcon,
  FormatListBulleted as ListIcon,
  ReportGmailerrorred as NonConformityIcon,
  ContentCopy as CopyIcon,
  Build as BuildIcon,
  Create as CreateIcon,
  AccessTime as TimeIcon,
  PlayArrow as PlayArrowIcon
} from '@mui/icons-material';

import { styled } from '@mui/material/styles';

// üîç BASƒ∞T VE STABƒ∞L ARAMA KUTUSU - Focus kaybƒ± sorunu yok
const UltraStableSearchInput = React.memo<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  label?: string;
  size?: 'small' | 'medium';
  fullWidth?: boolean;
}>(({ value, onChange, placeholder = "", label = "", size = "small", fullWidth = true }) => {
  const [inputValue, setInputValue] = React.useState<string>(value);
  const debounceTimer = React.useRef<NodeJS.Timeout | null>(null);
  
  // Update internal value when external value changes
  React.useEffect(() => {
    setInputValue(value);
  }, [value]);
  
  // Simple input change handler with debounce
  const handleInputChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    
    // Clear previous timeout
    if (debounceTimer.current) {
      clearTimeout(debounceTimer.current);
    }
    
    // Set new timeout for debounced callback
    debounceTimer.current = setTimeout(() => {
      onChange(newValue);
    }, 300);
  }, [onChange]);
  
  // Cleanup
  React.useEffect(() => {
    return () => {
      if (debounceTimer.current) clearTimeout(debounceTimer.current);
    };
  }, []);
  
  return (
    <TextField
      fullWidth={fullWidth}
      size={size}
      label={label}
      value={inputValue}
      onChange={handleInputChange}
      placeholder={placeholder}
      autoComplete="off"
      spellCheck={false}
      InputProps={{
        startAdornment: (
          <InputAdornment position="start">
            <SearchIcon />
          </InputAdornment>
        ),
      }}
      sx={{
        '& .MuiOutlinedInput-root': {
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: 'primary.main',
          },
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            borderColor: 'primary.main',
            borderWidth: '2px',
          },
        },
      }}
    />
  );
});

// Styled Components
const StyledCard = styled(Card)(({ theme }) => ({
  height: '100%',
  transition: 'all 0.3s ease-in-out',
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: theme.shadows[8],
  },
}));

const StatusChip = styled(Chip)<{ status: string }>(({ theme, status }) => ({
  fontWeight: 600,
  fontSize: '0.75rem',
  ...(status === 'completed' && {
    backgroundColor: '#e8f5e8',
    color: '#2e7d32',
  }),
  ...(status === 'in_progress' && {
    backgroundColor: '#fff3e0',
    color: '#ef6c00',
  }),
  ...(status === 'planned' && {
    backgroundColor: '#e3f2fd',
    color: '#1565c0',
  }),
  ...(status === 'overdue' && {
    backgroundColor: '#ffebee',
    color: '#c62828',
  }),
}));

const PriorityChip = styled(Chip)<{ priority: string }>(({ theme, priority }) => ({
  fontWeight: 600,
  fontSize: '0.75rem',
  ...(priority === 'low' && {
    backgroundColor: '#e8f5e8',
    color: '#2e7d32',
  }),
  ...(priority === 'medium' && {
    backgroundColor: '#fff3e0',
    color: '#ef6c00',
  }),
  ...(priority === 'high' && {
    backgroundColor: '#ffebee',
    color: '#c62828',
  }),
  ...(priority === 'critical' && {
    backgroundColor: '#f3e5f5',
    color: '#7b1fa2',
  }),
}));

// Basic interfaces
interface AuditPlan {
  id: string;
  title: string;
  description: string;
  auditType: 'internal' | 'cross' | 'supplier' | 'process' | 'document' | 'system';
  scope: string[];
  department: string;
  process: string[];
  plannedDate: string;
  duration: number;
  status: 'planned' | 'in_progress' | 'completed' | 'overdue' | 'cancelled';
  auditorTeam: AuditorMember[];
  auditees: string[];
  standards: string[];
  priority: 'low' | 'medium' | 'high' | 'critical';
  createdBy: string;
  createdDate: string;
  actualStartDate?: string;
  actualEndDate?: string;
  findings?: Finding[];
  actions?: Action[];
}

interface AuditorMember {
  id: string;
  name: string;
  role: 'lead_auditor' | 'auditor' | 'observer' | 'technical_expert';
  qualifications: string[];
  department: string;
  email: string;
  isActive: boolean;
}

interface Finding {
  id: string;
  auditId: string;
  findingNumber: string;
  type: 'nonconformity' | 'improvement_opportunity' | 'positive_finding' | 'observation';
  severity: 'major' | 'minor' | 'observation';
  category: string;
  clause: string;
  requirement: string;
  description: string;
  evidence: string;
  location: string;
  department: string;
  process: string;
  discoveredDate: string;
  discoveredBy: string;
  status: 'open' | 'action_assigned' | 'in_progress' | 'verification_pending' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'critical';
  actions: Action[];
}

interface Action {
  id: string;
  findingId: string;
  auditId: string;
  actionType: 'corrective' | 'preventive' | 'improvement';
  description: string;
  responsible: string;
  targetDate: string;
  actualCompletionDate?: string;
  status: 'assigned' | 'in_progress' | 'completed' | 'overdue' | 'verified';
  progress: number;
  verificationRequired: boolean;
}

interface AuditMetrics {
  totalAudits: number;
  completedAudits: number;
  onTimeCompletion: number;
  totalFindings: number;
  findingsByType: { [key: string]: number };
  findingsBySeverity: { [key: string]: number };
  openActions: number;
  overdueActions: number;
  actionCompletionRate: number;
  departmentPerformance: { [key: string]: number };
}

// YENƒ∞ INTERFACE'LER - Birim Bazlƒ± Soru Listesi Sistemi
interface AuditQuestion {
  id: string;
  questionNumber: string;
  questionText: string;
  category: 'iso9001' | 'iso14001' | 'iso45001' | 'ts3834' | 'general' | 'process_specific';
  subcategory: string;
  standardClause: string;  // ISO standardƒ± madde numarasƒ±
  department: string;
  process: string[];
  answerType: 'yes_no' | 'yes_no_partial' | 'rating' | 'text' | 'multiple_choice';
  answerOptions?: string[];  // Multiple choice i√ßin se√ßenekler
  isRequired: boolean;
  isCritical: boolean;  // Kritik sorular i√ßin uygunsuzluk a√ßma zorunlu
  weight: number;  // Soru aƒüƒ±rlƒ±ƒüƒ± (1-5)
  expectedAnswer: string;  // Beklenen cevap
  guidelines: string;  // Denet√ßi i√ßin rehber notlar
  evidence: string[];  // Kanƒ±t t√ºrleri
  createdBy: string;
  createdDate: string;
  lastModified: string;
  version: string;
  isActive: boolean;
}

interface DepartmentQuestionSet {
  id: string;
  departmentId: string;
  departmentName: string;
  version: string;
  effectiveDate: string;
  createdBy: string;
  questions: AuditQuestion[];
  isActive: boolean;
  description: string;
  estimatedDuration: number;  // Dakika cinsinden
  completionRate?: number;
}

interface AuditForm {
  id: string;
  auditId: string;
  departmentId: string;
  formName: string;
  auditorName: string;
  auditDate: string;
  startTime: string;
  endTime: string;
  status: 'draft' | 'in_progress' | 'completed' | 'reviewed';
  questionResponses: QuestionResponse[];
  overallScore: number;
  completionPercentage: number;
  nonConformitiesCount: number;
  improvementOpportunitiesCount: number;
  notes: string;
  attachments: string[];
  createdDate: string;
  submittedDate?: string;
  reviewedBy?: string;
  reviewedDate?: string;
}

interface QuestionResponse {
  questionId: string;
  answer: string;
  answerType: 'conform' | 'non_conform' | 'partial' | 'not_applicable' | 'improvement';
  score: number;  // 0-5 arasƒ± puan
  evidence: string;
  notes: string;
  attachments: string[];
  nonConformityCreated?: boolean;
  nonConformityId?: string;
  answeredBy: string;
  answeredDate: string;
  verifiedBy?: string;
  verifiedDate?: string;
}

interface QuestionTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  applicableDepartments: string[];
  questions: AuditQuestion[];
  createdBy: string;
  createdDate: string;
  isPublic: boolean;
}

const InternalAuditManagement: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  // State Management
  const [activeTab, setActiveTab] = useState(0);
  const [auditPlans, setAuditPlans] = useState<AuditPlan[]>([]);
  const [findings, setFindings] = useState<Finding[]>([]);
  const [actions, setActions] = useState<Action[]>([]);
  const [auditors, setAuditors] = useState<AuditorMember[]>([]);
  const [metrics, setMetrics] = useState<AuditMetrics | null>(null);
  
  // YENƒ∞ STATE'LER - Soru Listesi Sistemi
  const [questionSets, setQuestionSets] = useState<DepartmentQuestionSet[]>([]);
  const [auditForms, setAuditForms] = useState<AuditForm[]>([]);
  const [questionTemplates, setQuestionTemplates] = useState<QuestionTemplate[]>([]);
  const [activeQuestionSet, setActiveQuestionSet] = useState<DepartmentQuestionSet | null>(null);
  const [activeAuditForm, setActiveAuditForm] = useState<AuditForm | null>(null);
  
  // Dialog States
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dialogType, setDialogType] = useState<'plan' | 'finding' | 'action' | 'auditor' | 'question' | 'form' | 'template'>('plan');
  const [selectedItem, setSelectedItem] = useState<any>(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  
  // YENƒ∞ DIALOG STATE'LERƒ∞ - Soru Sistemi
  const [questionDialogOpen, setQuestionDialogOpen] = useState(false);
  const [formDialogOpen, setFormDialogOpen] = useState(false);
  const [templateDialogOpen, setTemplateDialogOpen] = useState(false);
  const [questionFormMode, setQuestionFormMode] = useState<'create' | 'edit' | 'view'>('create');
  const [selectedQuestion, setSelectedQuestion] = useState<AuditQuestion | null>(null);
  const [selectedDepartment, setSelectedDepartment] = useState<string>('');
  const [auditFormMode, setAuditFormMode] = useState<'conduct' | 'review' | 'view'>('conduct');
  
  // Soru Listesi Dialog State'leri
  const [questionSetDialogOpen, setQuestionSetDialogOpen] = useState(false);
  const [questionViewDialogOpen, setQuestionViewDialogOpen] = useState(false);
  const [selectedQuestionSet, setSelectedQuestionSet] = useState<DepartmentQuestionSet | null>(null);
  const [questionSetFormData, setQuestionSetFormData] = useState({
    departmentName: '',
    description: '',
    estimatedDuration: 60,
    questions: [] as AuditQuestion[]
  });

  // Denetim Formu State'leri
  const [auditFormDialogOpen, setAuditFormDialogOpen] = useState(false);
  const [currentAuditForm, setCurrentAuditForm] = useState<AuditForm | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [auditStartTime, setAuditStartTime] = useState<string>('');
  
  // Filter States
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [typeFilter, setTypeFilter] = useState('');
  const [departmentFilter, setDepartmentFilter] = useState('');
  
  // Pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // Form States
  const [formStep, setFormStep] = useState(0);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    auditType: 'internal' as 'internal' | 'cross' | 'supplier' | 'process' | 'document' | 'system',
    scope: [] as string[],
    department: '',
    process: [] as string[],
    plannedDate: '',
    duration: 8,
    auditorTeam: [] as AuditorMember[],
    auditees: [] as string[],
    standards: [] as string[],
    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical',
    // Finding specific fields
    findingNumber: '',
    type: 'nonconformity' as 'nonconformity' | 'improvement_opportunity' | 'positive_finding' | 'observation',
    severity: 'minor' as 'major' | 'minor' | 'observation',
    category: '',
    clause: '',
    requirement: '',
    evidence: '',
    location: '',
    discoveredDate: '',
    discoveredBy: '',
    // Action specific fields
    actionNumber: '',
    actionType: 'corrective' as 'corrective' | 'preventive' | 'improvement',
    actionDescription: '',
    responsible: '',
    targetDate: '',
    verificationRequired: true,
    verificationMethod: '',
    verificationDate: '',
    verificationBy: '',
    resources: '',
    budget: 0,
    expectedResult: '',
    riskAssessment: '',
    successCriteria: ''
  });
  
  // Constants for dropdowns
  const departments = [
    'Kalite', '√úretim', 'Satƒ±n Alma', 'ƒ∞nsan Kaynaklarƒ±', 'Finans', 
    'Ar-Ge', 'Pazarlama', 'Satƒ±≈ü', 'Bilgi ƒ∞≈ülem', '√áevre', 'ƒ∞SG'
  ];
  
  const auditTypes = [
    { value: 'internal', label: 'ƒ∞√ß Tetkik' },
    { value: 'cross', label: '√áapraz Tetkik' },
    { value: 'supplier', label: 'Tedarik√ßi Tetkiki' },
    { value: 'process', label: 'S√ºre√ß Tetkiki' },
    { value: 'document', label: 'Dok√ºman Tetkiki' },
    { value: 'system', label: 'Sistem Tetkiki' }
  ];
  
  const standardsList = [
    'ISO 9001:2015', 'ISO 14001:2015', 'ISO 45001:2018', 'ISO 27001:2013',
    'IATF 16949:2016', 'TS 3834-2', 'EN 1090', 'ISO 50001:2018',
    'ISO 17025:2017', 'AS9100D', 'ISO 13485:2016'
  ];
  
  const processList = [
    'Kaynak ƒ∞≈ülemleri', 'Montaj', 'Test ve Kontrol', 'Kalite Kontrol',
    'Depo Y√∂netimi', 'Sevkiyat', 'Satƒ±n Alma', 'Tedarik√ßi Y√∂netimi',
    'ƒ∞nsan Kaynaklarƒ±', 'Eƒüitim', 'Dok√ºmantasyon', 'Bakƒ±m',
    'Planlama', 'Tasarƒ±m', 'Ar-Ge', 'M√º≈üteri ƒ∞li≈ükileri'
  ];
  
  const scopeList = [
    '√úretim Planlama', 'Kalite Kontrol', 'Depo Y√∂netimi', 'Sevkiyat',
    'Tedarik√ßi Deƒüerlendirme', 'Satƒ±n Alma S√ºreci', 'ƒ∞nsan Kaynaklarƒ±',
    'Eƒüitim Y√∂netimi', 'Dok√ºman Kontrol√º', 'Bakƒ±m Planlamasƒ±',
    '√áevre Politikasƒ±', 'Atƒ±k Y√∂netimi', 'Emisyon Kontrol√º', 'ƒ∞SG',
    'Risk Y√∂netimi', 'M√º≈üteri Memnuniyeti'
  ];

  // Sample Data
  useEffect(() => {
    initializeSampleData();
    initializeQuestionSets();
  }, []);

  const initializeSampleData = () => {
    // Sample audit plans
    const samplePlans: AuditPlan[] = [
      {
        id: '1',
        title: 'Q1 2024 ƒ∞√ß Tetkik - √úretim Departmanƒ±',
        description: '√úretim s√ºre√ßlerinin ISO 9001:2015 gerekliliklerine uygunluk tetkiki',
        auditType: 'internal',
        scope: ['√úretim Planlama', 'Kalite Kontrol', 'Depo Y√∂netimi'],
        department: '√úretim',
        process: ['Kaynak ƒ∞≈ülemleri', 'Montaj', 'Test ve Kontrol'],
        plannedDate: '2024-03-15',
        duration: 8,
        status: 'completed',
        auditorTeam: [
          {
            id: '1',
            name: 'Ahmet Yƒ±lmaz',
            role: 'lead_auditor',
            qualifications: ['ISO 9001 Ba≈ü Denet√ßi'],
            department: 'Kalite',
            email: 'ahmet.yilmaz@kademe.com',
            isActive: true
          }
        ],
        auditees: ['Mehmet Demir', 'Fatma Kaya', 'Osman √áelik'],
        standards: ['ISO 9001:2015', 'TS 3834-2'],
        priority: 'high',
        createdBy: 'Sistem',
        createdDate: '2024-01-15',
        actualStartDate: '2024-03-15',
        actualEndDate: '2024-03-15'
      },
      {
        id: '2',
        title: 'IATF 16949 √áapraz Tetkik - Satƒ±n Alma',
        description: 'Tedarik√ßi deƒüerlendirme s√ºre√ßlerinin IATF 16949 uygunluƒüu',
        auditType: 'cross',
        scope: ['Tedarik√ßi Deƒüerlendirme', 'Satƒ±n Alma S√ºreci'],
        department: 'Satƒ±n Alma',
        process: ['Tedarik√ßi Se√ßimi', 'Sipari≈ü Y√∂netimi'],
        plannedDate: '2024-04-20',
        duration: 6,
        status: 'in_progress',
        auditorTeam: [
          {
            id: '2',
            name: 'Ay≈üe √ñzkan',
            role: 'lead_auditor',
            qualifications: ['IATF 16949 Denet√ßi'],
            department: 'Kalite',
            email: 'ayse.ozkan@kademe.com',
            isActive: true
          }
        ],
        auditees: ['Hasan Yƒ±ldƒ±z', 'Zeynep Acar'],
        standards: ['IATF 16949:2016'],
        priority: 'medium',
        createdBy: 'Sistem',
        createdDate: '2024-02-10'
      },
      {
        id: '3',
        title: 'ISO 14001 Sistem Tetkiki - √áevre Y√∂netimi',
        description: '√áevre y√∂netim sisteminin etkinlik deƒüerlendirmesi',
        auditType: 'system',
        scope: ['√áevre Politikasƒ±', 'Atƒ±k Y√∂netimi', 'Emisyon Kontrol√º'],
        department: '√áevre',
        process: ['Atƒ±k Toplama', 'Emisyon √ñl√ß√ºm√º'],
        plannedDate: '2024-05-10',
        duration: 4,
        status: 'planned',
        auditorTeam: [
          {
            id: '3',
            name: 'Can Erdoƒüan',
            role: 'auditor',
            qualifications: ['ISO 14001 Denet√ßi'],
            department: '√áevre',
            email: 'can.erdogan@kademe.com',
            isActive: true
          }
        ],
        auditees: ['Elif ≈ûahin', 'Murat Kaya'],
        standards: ['ISO 14001:2015'],
        priority: 'low',
        createdBy: 'Sistem',
        createdDate: '2024-03-05'
      }
    ];

    // Sample findings
    const sampleFindings: Finding[] = [
      {
        id: 'f1',
        auditId: '1',
        findingNumber: 'F-2024-001',
        type: 'nonconformity',
        severity: 'minor',
        category: 'Dok√ºman Kontrol√º',
        clause: '7.5.3',
        requirement: 'Dok√ºmantasyonlu bilginin kontrol√º',
        description: 'Kaynak prosed√ºrlerinin g√ºncel versiyonlarƒ± sahada bulunmuyor.',
        evidence: 'WPS-001 dok√ºmantƒ±nƒ±n Rev.2 versiyonu kullanƒ±lƒ±rken Rev.3 y√ºr√ºrl√ºkte.',
        location: 'Kaynak At√∂lyesi',
        department: '√úretim',
        process: 'Kaynak ƒ∞≈ülemleri',
        discoveredDate: '2024-03-15',
        discoveredBy: 'Ahmet Yƒ±lmaz',
        status: 'closed',
        priority: 'medium',
        actions: []
      },
      {
        id: 'f2',
        auditId: '2',
        findingNumber: 'F-2024-002',
        type: 'improvement_opportunity',
        severity: 'observation',
        category: 'Tedarik√ßi Y√∂netimi',
        clause: '8.4.2',
        requirement: 'Dƒ±≈ü kaynak saƒülanan s√ºre√ßlerin kontrol√º',
        description: 'Tedarik√ßi performans deƒüerlendirme sistemi geli≈ütirilebilir.',
        evidence: 'Mevcut sistem manuel, otomatik raporlama eksik.',
        location: 'Satƒ±n Alma Ofisi',
        department: 'Satƒ±n Alma',
        process: 'Tedarik√ßi Deƒüerlendirme',
        discoveredDate: '2024-04-20',
        discoveredBy: 'Ay≈üe √ñzkan',
        status: 'action_assigned',
        priority: 'low',
        actions: []
      }
    ];

    // Sample actions
    const sampleActions: Action[] = [
      {
        id: 'a1',
        findingId: 'f1',
        auditId: '1',
        actionType: 'corrective',
        description: 'G√ºncel WPS dok√ºmanlarƒ±nƒ±n sahaya yerle≈ütirilmesi ve eski versiyonlarƒ±n toplanmasƒ±',
        responsible: 'Mehmet Demir',
        targetDate: '2024-03-25',
        actualCompletionDate: '2024-03-22',
        status: 'completed',
        progress: 100,
        verificationRequired: true
      },
      {
        id: 'a2',
        findingId: 'f2',
        auditId: '2',
        actionType: 'improvement',
        description: 'Tedarik√ßi performans deƒüerlendirme sisteminin otomatikle≈ütirilmesi',
        responsible: 'Hasan Yƒ±ldƒ±z',
        targetDate: '2024-06-30',
        status: 'in_progress',
        progress: 35,
        verificationRequired: false
      }
    ];

    setAuditPlans(samplePlans);
    setFindings(sampleFindings);
    setActions(sampleActions);
    setAuditors([
      {
        id: '1',
        name: 'Ahmet Yƒ±lmaz',
        role: 'lead_auditor',
        qualifications: ['ISO 9001 Ba≈ü Denet√ßi', 'IATF 16949 Denet√ßi'],
        department: 'Kalite',
        email: 'ahmet.yilmaz@kademe.com',
        isActive: true
      },
      {
        id: '2',
        name: 'Ay≈üe √ñzkan',
        role: 'lead_auditor',
        qualifications: ['IATF 16949 Denet√ßi', 'ISO 14001 Denet√ßi'],
        department: 'Kalite',
        email: 'ayse.ozkan@kademe.com',
        isActive: true
      },
      {
        id: '3',
        name: 'Can Erdoƒüan',
        role: 'auditor',
        qualifications: ['ISO 14001 Denet√ßi'],
        department: '√áevre',
        email: 'can.erdogan@kademe.com',
        isActive: true
      }
    ]);
    
    calculateMetrics(samplePlans, sampleFindings, sampleActions);
  };

  const initializeQuestionSets = () => {
    // ƒ∞nsan Kaynaklarƒ± Departmanƒ± Soru Listesi - ISO 9001:2015 Kapsamlƒ± Tetkik
    const ikQuestions: AuditQuestion[] = [
      // 4.1 Kurulu≈ü ve baƒülamƒ±nƒ±n anla≈üƒ±lmasƒ±
      {
        id: 'ik-q-001',
        questionNumber: '1',
        questionText: 'S√ºre√ßlere ait i√ß ve dƒ±≈ü hususlar tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Kurulu≈ü ve baƒülamƒ±nƒ±n anla≈üƒ±lmasƒ±',
        standardClause: '4.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['S√ºre√ß Y√∂netimi', 'Stratejik Planlama'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ßlere ait i√ß ve dƒ±≈ü hususlarƒ±n tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['S√ºre√ß Haritasƒ±', 'ƒ∞√ß/Dƒ±≈ü Husus Analizi', 'Dok√ºmantasyon'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-002',
        questionNumber: '2',
        questionText: 'ƒ∞√ß ve dƒ±≈ü hususlar hakkƒ±ndaki bilgiler izleniyor ve g√∂zden ge√ßiriliyor mu? Ne zaman ve kim tarafƒ±ndan g√∂zden ge√ßirileceƒüi tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Kurulu≈ü ve baƒülamƒ±nƒ±n anla≈üƒ±lmasƒ±',
        standardClause: '4.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['ƒ∞zleme ve G√∂zden Ge√ßirme', 'Bilgi Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞√ß ve dƒ±≈ü hususlarƒ±n izleme ve g√∂zden ge√ßirme s√ºre√ßlerini kontrol edin',
        evidence: ['G√∂zden Ge√ßirme Kayƒ±tlarƒ±', 'Sorumluluk Matrisi', 'Zaman Planƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-003',
        questionNumber: '3',
        questionText: 'KYS ile ilgili taraflar ve bu taraflarƒ±n beklentileri (i√ß ‚Äì dƒ±≈ü) tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'ƒ∞lgili taraflarƒ±n ihtiya√ß ve beklentilerini anlama',
        standardClause: '4.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Payda≈ü Y√∂netimi', 'ƒ∞htiya√ß Analizi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'KYS ile ilgili taraflarƒ±n ve beklentilerinin tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Payda≈ü Listesi', 'Beklenti Analizi', 'ƒ∞√ß/Dƒ±≈ü Taraf Matrisi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-004',
        questionNumber: '4',
        questionText: 'ƒ∞lgili taraflar ve beklentileri izleniyor ve g√∂zden ge√ßiriliyor mu? G√∂zden ge√ßirme sƒ±klƒ±ƒüƒ±, sorumlusu ve y√∂ntemi belirlenmi≈ü mi?',
        category: 'iso9001',
        subcategory: 'ƒ∞lgili taraflarƒ±n ihtiya√ß ve beklentilerini anlama',
        standardClause: '4.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Payda≈ü Y√∂netimi', 'ƒ∞zleme ve Deƒüerlendirme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞lgili taraflarƒ±n izleme ve g√∂zden ge√ßirme s√ºre√ßlerini kontrol edin',
        evidence: ['G√∂zden Ge√ßirme Planƒ±', 'ƒ∞zleme Kayƒ±tlarƒ±', 'Sorumluluk Tanƒ±mlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 6.1 Riskler ve fƒ±rsatlarla ilgili faaliyetler
      {
        id: 'ik-q-005',
        questionNumber: '5',
        questionText: 'Risk analiz y√∂ntemi tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Riskler ve fƒ±rsatlarla ilgili faaliyetler',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Risk Y√∂netimi', 'Analiz'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Risk analiz y√∂nteminin tanƒ±mlandƒ±ƒüƒ±nƒ± ve uygulandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Risk Y√∂netim Prosed√ºr√º', 'Risk Analiz Metodolojisi', 'Risk Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-006',
        questionNumber: '6',
        questionText: 'ƒ∞√ß ve dƒ±≈ü hususlar ile ilgili taraf beklentileri kapsamƒ±nda riskler belirlenmi≈ü mi? S√ºre√ßlere adapte edilmi≈ü mi? Fƒ±rsatlar tanƒ±mlanmƒ±≈ü mƒ±? Risk noktalarƒ± i√ßin √∂nlemler alƒ±nmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Riskler ve fƒ±rsatlarla ilgili faaliyetler',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Risk Y√∂netimi', 'S√ºre√ß Y√∂netimi', 'Fƒ±rsat Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Risk belirleme, s√ºre√ß adaptasyonu, fƒ±rsat tanƒ±mlama ve √∂nlem alma s√ºre√ßlerini kontrol edin',
        evidence: ['Risk Matrisi', 'Fƒ±rsat Analizi', '√ñnlem Planlarƒ±', 'S√ºre√ß Entegrasyonu'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-007',
        questionNumber: '7',
        questionText: 'ƒ∞htiya√ß duyulan s√ºre√ßler tanƒ±mlanmƒ±≈ü mƒ±? S√ºre√ßlerin sorumlularƒ±, girdileri, √ßƒ±ktƒ±larƒ±, metodlarƒ±, performans kriterleri ve kaynaklarƒ± belirlenmi≈ü mi?',
        category: 'iso9001',
        subcategory: 'S√ºre√ß Y√∂netimi',
        standardClause: '4.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['S√ºre√ß Tanƒ±mlama', 'S√ºre√ß Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ß tanƒ±mlamalarƒ± ve t√ºm s√ºre√ß bile≈üenlerinin belirlendiƒüini kontrol edin',
        evidence: ['S√ºre√ß Haritasƒ±', 'S√ºre√ß Tanƒ±mlarƒ±', 'Sorumluluk Matrisi', 'Performans Kriterleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-008',
        questionNumber: '8',
        questionText: 'S√ºre√ßlerin etkinlik ve verimlilik g√∂stergeleri tanƒ±mlanmƒ±≈ü mƒ±? √úst y√∂netim YGG toplantƒ±larƒ±nda bu kriterleri g√∂zden ge√ßiriyor mu?',
        category: 'iso9001',
        subcategory: 'S√ºre√ß Performansƒ±',
        standardClause: '4.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Performans Y√∂netimi', '√úst Y√∂netim G√∂zden Ge√ßirmesi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ß performans g√∂stergelerini ve √ºst y√∂netim g√∂zden ge√ßirmelerini kontrol edin',
        evidence: ['Performans G√∂stergeleri', 'YGG Toplantƒ± Kayƒ±tlarƒ±', 'G√∂zden Ge√ßirme Raporlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-009',
        questionNumber: '9',
        questionText: 'S√ºre√ß sahipleri tanƒ±mlƒ± mƒ±? Rollerini anlamƒ±≈ü ve yerine getirmeye yetkili mi? G√∂rev tanƒ±mlarƒ±nda bu bilgiler mevcut mu?',
        category: 'iso9001',
        subcategory: 'S√ºre√ß Sahipliƒüi',
        standardClause: '5.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['S√ºre√ß Y√∂netimi', 'Yetki ve Sorumluluk'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ß sahiplerinin tanƒ±mlƒ± olduƒüunu ve yetkilerinin belirlendiƒüini kontrol edin',
        evidence: ['S√ºre√ß Sahipliƒüi Matrisi', 'G√∂rev Tanƒ±mlarƒ±', 'Yetki Belgeleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-010',
        questionNumber: '10',
        questionText: 'Yetki ve sorumluluklar a√ßƒ±k√ßa belirlenmi≈ü mi? Vekalet durumlarƒ± tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Yetki ve Sorumluluk',
        standardClause: '5.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Organizasyon Yapƒ±sƒ±', 'Yetki Devri'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Yetki ve sorumluluklarƒ±n a√ßƒ±k olduƒüunu ve vekalet durumlarƒ±nƒ±n tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Yetki Matrisi', 'Sorumluluk Tanƒ±mlarƒ±', 'Vekalet Prosed√ºr√º'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 7.1.2 ƒ∞nsan kaynaklarƒ±
      {
        id: 'ik-q-011',
        questionNumber: '11',
        questionText: 'KYS nin etkin ≈üekilde i≈ületilmesi ile proseslerin i≈ületilmesi ve kontrol√º i√ßin gerekli personeli saƒüƒ±n ve korudu mu? (Organizasyon ≈üemasƒ±)',
        category: 'iso9001',
        subcategory: 'ƒ∞nsan kaynaklarƒ±',
        standardClause: '7.1.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Personel Tedarik', 'Organizasyon Yapƒ±sƒ±', 'ƒ∞nsan Kaynaklarƒ± Planlama'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'KYS i√ßin gerekli personelin saƒülandƒ±ƒüƒ±nƒ± ve korunduƒüunu kontrol edin',
        evidence: ['Organizasyon ≈ûemasƒ±', 'Personel Planƒ±', 'ƒ∞stihdam Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 7.1.4 Proseslerin i≈ületimi i√ßin √ßevre
      {
        id: 'ik-q-012',
        questionNumber: '12',
        questionText: 'Sosyal ortamƒ±n y√∂netilmesi mi? (Dok√ºmana baƒülanmƒ±≈ü, sosyal ileti≈üim alanlarƒ± vb y√∂netimde, g√ºvenilirlik, a√ßƒ±klƒ±k, g√ºven, saygƒ±, g√ºvenlik)',
        category: 'iso9001',
        subcategory: 'Proseslerin i≈ületimi i√ßin √ßevre',
        standardClause: '7.1.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Sosyal Ortam Y√∂netimi', 'ƒ∞√ß ƒ∞leti≈üim', '√áalƒ±≈üan ƒ∞li≈ükileri'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Sosyal ortamƒ±n y√∂netildiƒüini ve dok√ºmante edildiƒüini kontrol edin',
        evidence: ['Sosyal Ortam Politikasƒ±', 'ƒ∞leti≈üim Prosed√ºrleri', '√áalƒ±≈üan Memnuniyet Anketleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 7.2 Yetkinlik
      {
        id: 'ik-q-013',
        questionNumber: '13',
        questionText: 'KYS performansƒ±nƒ± ve etkinliƒüini etkileyen kendi kontrol√º altƒ±nda olan ki≈üilerin gerekli yetkinliƒüini tanƒ±mlamƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Yetkinlik',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Yetkinlik Y√∂netimi', 'Performans Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Gerekli yetkinliklerin tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Yetkinlik Matrisi', 'ƒ∞≈ü Tanƒ±mlarƒ±', 'Yetkinlik Gereksinimleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-014',
        questionNumber: '14',
        questionText: 'Yetkinliklerin tanƒ±mlanmasƒ± yapan eƒüitim, √∂ƒüretim ve tecr√ºbelerine dikkate alƒ±nmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Yetkinlik',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Eƒüitim Y√∂netimi', 'Yetkinlik Geli≈ütirme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Yetkinlik tanƒ±mlamada eƒüitim, √∂ƒüretim ve tecr√ºbenin dikkate alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Eƒüitim Kayƒ±tlarƒ±', 'Tecr√ºbe Deƒüerlendirmeleri', 'Yetkinlik Deƒüerlendirme Formlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 7.3 Farkƒ±ndalƒ±k
      {
        id: 'ik-q-015',
        questionNumber: '15',
        questionText: 'T√ºm Personelin A≈üaƒüƒ±daki konularda eƒüitimler planlanmƒ±≈ü mƒ±? Eƒüitim veya altƒ±na alƒ±nmƒ±≈ü ve kalite politikasƒ±, hedefleri, kalite y√∂netim sistemine katkƒ±larƒ±, kalite y√∂netim sistemi ≈üartlarƒ±na uymamanƒ±n sonu√ßlarƒ±, m√º≈üteri olarak',
        category: 'iso9001',
        subcategory: 'Farkƒ±ndalƒ±k',
        standardClause: '7.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Eƒüitim Planlama', 'Farkƒ±ndalƒ±k Eƒüitimleri'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Farkƒ±ndalƒ±k eƒüitimlerinin planlandƒ±ƒüƒ±nƒ± ve verildiƒüini kontrol edin',
        evidence: ['Eƒüitim Planƒ±', 'Eƒüitim Kayƒ±tlarƒ±', 'Katƒ±lƒ±m Listeleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // 9.1.1 Genel
      {
        id: 'ik-q-016',
        questionNumber: '16',
        questionText: 'S√ºre√ß Performans hedefleri tanƒ±mlanmƒ±≈ü mƒ±? (personelle ilgili ve zaman aralƒ±klƒ± olabilecek) - kalite ve deƒüerlendirmelerini y√∂netmeli vb.',
        category: 'iso9001',
        subcategory: 'ƒ∞zleme, √∂l√ßme, analiz ve deƒüerlendirme - Genel',
        standardClause: '9.1.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Performans ƒ∞zleme', 'Hedef Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ß performans hedeflerinin tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Performans Hedefleri', 'KPI Tanƒ±mlarƒ±', '√ñl√ß√ºm Planƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-017',
        questionNumber: '17',
        questionText: 'Performans g√∂stergelerini kƒ±yaslayacaƒüƒ± mƒ±?',
        category: 'iso9001',
        subcategory: 'ƒ∞zleme, √∂l√ßme, analiz ve deƒüerlendirme - Genel',
        standardClause: '9.1.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Performans Deƒüerlendirme', 'Kƒ±yaslama'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'Performans g√∂stergelerinin kƒ±yaslandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Kƒ±yaslama Raporlarƒ±', 'Benchmark Analizleri', 'Performans Kar≈üƒ±la≈ütƒ±rmalarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-018',
        questionNumber: '18',
        questionText: 'Bu hedeflere ula≈üƒ±lmadƒ±ƒüƒ±nda d√ºzeltici tedbiyat faaliyeti ba≈ülatƒ±lmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'ƒ∞zleme, √∂l√ßme, analiz ve deƒüerlendirme - Genel',
        standardClause: '9.1.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['D√ºzeltici Faaliyetler', 'Performans ƒ∞yile≈ütirme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Hedeflere ula≈üƒ±lamadƒ±ƒüƒ±nda d√ºzeltici faaliyetlerin ba≈ülatƒ±ldƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['D√ºzeltici Faaliyet Kayƒ±tlarƒ±', 'ƒ∞yile≈ütirme Planlarƒ±', 'Aksiyon Takip Formlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      // Kalan 40 soru ekleniyor
      {
        id: 'ik-q-019',
        questionNumber: '19',
        questionText: '√úretim s√ºre√ßlerine ve altyapƒ± ekipmanlarƒ±na y√∂nelik i√ß ve dƒ±≈ü riskler deƒüerlendirilmi≈ü mi? M√º≈üteri etkisine g√∂re acil durum planlarƒ± hazƒ±rlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Risk Y√∂netimi',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Risk Deƒüerlendirme', 'Acil Durum Planlama'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: '√úretim ve altyapƒ± risklerinin deƒüerlendirildiƒüini ve acil durum planlarƒ±nƒ±n hazƒ±rlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Risk Deƒüerlendirme Raporu', 'Acil Durum Planlarƒ±', 'M√º≈üteri Etki Analizi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-020',
        questionNumber: '20',
        questionText: 'Hizmet kesintisi, doƒüal afet, yangƒ±n, program kesintisi, i≈ü√ßi g√ºc√º kaybƒ± gibi durumlara y√∂nelik acil durum planƒ± hazƒ±rlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Acil Durum Y√∂netimi',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Acil Durum Planlama', 'ƒ∞≈ü S√ºrekliliƒüi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: '√áe≈üitli acil durumlara y√∂nelik planlarƒ±n hazƒ±rlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Acil Durum Planlarƒ±', 'ƒ∞≈ü S√ºrekliliƒüi Planƒ±', 'Kriz Y√∂netim Prosed√ºr√º'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-021',
        questionNumber: '21',
        questionText: 'Acil durumlar en az yƒ±lda bir tatbikat ile test ediliyor mu?',
        category: 'iso9001',
        subcategory: 'Acil Durum Tatbikatƒ±',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Tatbikat Y√∂netimi', 'Acil Durum Testleri'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Acil durum tatbikatlarƒ±nƒ±n d√ºzenli olarak yapƒ±ldƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Tatbikat Kayƒ±tlarƒ±', 'Tatbikat Raporlarƒ±', 'Katƒ±lƒ±m Listeleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-022',
        questionNumber: '22',
        questionText: '√áok disiplinli ekiplerle acil durum planlarƒ± g√∂zden ge√ßiriliyor ve g√ºncelleniyor mu?',
        category: 'iso9001',
        subcategory: 'Acil Durum Plan G√ºncelleme',
        standardClause: '6.1',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Plan G√∂zden Ge√ßirme', '√áok Disiplinli √áalƒ±≈üma'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'Acil durum planlarƒ±nƒ±n √ßok disiplinli ekiplerle g√∂zden ge√ßirildiƒüini kontrol edin',
        evidence: ['G√∂zden Ge√ßirme Kayƒ±tlarƒ±', 'Ekip Toplantƒ± Tutanaklarƒ±', 'Plan G√ºncelleme Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-023',
        questionNumber: '23',
        questionText: 'Kalite ama√ß ve hedefleri olu≈üturulmu≈ü, dok√ºmante edilmi≈ü ve kalite politikasƒ± ile uyumlu mu?',
        category: 'iso9001',
        subcategory: 'Kalite Hedefleri',
        standardClause: '6.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Hedef Belirleme', 'Politika Uyumu'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Kalite ama√ß ve hedeflerinin olu≈üturulduƒüunu ve politika ile uyumlu olduƒüunu kontrol edin',
        evidence: ['Kalite Hedefleri', 'Kalite Politikasƒ±', 'Uyumluluk Analizi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-024',
        questionNumber: '24',
        questionText: 'Kalite ama√ßlarƒ±nƒ±n ne yapƒ±lacaƒüƒ±, kaynaklarƒ±, sorumlularƒ±, tamamlanma s√ºreleri ve deƒüerlendirme y√∂ntemleri tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Kalite Hedef Planlamasƒ±',
        standardClause: '6.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Hedef Planlama', 'Kaynak Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Kalite ama√ßlarƒ± i√ßin detaylƒ± planlamanƒ±n yapƒ±ldƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Hedef Planlarƒ±', 'Kaynak Planƒ±', 'Sorumluluk Matrisi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-025',
        questionNumber: '25',
        questionText: 'KYS\'nin i≈ületilmesi ve kontrol√º i√ßin gerekli personel g√∂revlendirilmi≈ü mi? Organizasyon ≈üemasƒ± g√ºncel mi?',
        category: 'iso9001',
        subcategory: 'ƒ∞nsan Kaynaklarƒ±',
        standardClause: '7.1.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Personel G√∂revlendirme', 'Organizasyon Yapƒ±sƒ±'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'KYS i√ßin gerekli personelin g√∂revlendirildiƒüini ve organizasyon ≈üemasƒ±nƒ±n g√ºncel olduƒüunu kontrol edin',
        evidence: ['Organizasyon ≈ûemasƒ±', 'G√∂revlendirme Belgeleri', 'Personel Listesi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-026',
        questionNumber: '26',
        questionText: '√áalƒ±≈üanlar i√ßin sosyal ortamlar (dinlenme alanƒ±, ileti≈üim alanƒ± vb.) saƒülanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Sosyal Ortam',
        standardClause: '7.1.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Sosyal Ortam Y√∂netimi', '√áalƒ±≈üan Refahƒ±'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: '√áalƒ±≈üanlar i√ßin sosyal ortamlarƒ±n saƒülandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Sosyal Alan Planlarƒ±', '√áalƒ±≈üan Memnuniyet Anketleri', 'Tesis Fotoƒüraflarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-027',
        questionNumber: '27',
        questionText: 'Fiziksel √ßevre ko≈üullarƒ± (ƒ±sƒ±, ƒ±≈üƒ±k, nem, hava kalitesi, hijyen, g√ºr√ºlt√º vb.) izleniyor ve y√∂netiliyor mu?',
        category: 'iso9001',
        subcategory: 'Fiziksel √áevre',
        standardClause: '7.1.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['√áevre Ko≈üullarƒ± ƒ∞zleme', 'ƒ∞≈ü Saƒülƒ±ƒüƒ±'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Fiziksel √ßevre ko≈üullarƒ±nƒ±n izlendiƒüini ve y√∂netildiƒüini kontrol edin',
        evidence: ['√áevre √ñl√ß√ºm Kayƒ±tlarƒ±', 'ƒ∞zleme Prosed√ºr√º', 'D√ºzeltici Faaliyetler'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-028',
        questionNumber: '28',
        questionText: 'Psikolojik iyilik hali ve ƒ∞SG a√ßƒ±sƒ±ndan √∂nlemler alƒ±nmƒ±≈ü mƒ±? (stres, t√ºkenmi≈ülik vb.)',
        category: 'iso9001',
        subcategory: 'Psikolojik ƒ∞yilik',
        standardClause: '7.1.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Psikolojik Destek', 'ƒ∞SG Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Psikolojik iyilik hali i√ßin √∂nlemlerin alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Psikolojik Destek Programlarƒ±', 'Stres Y√∂netimi Eƒüitimleri', 'ƒ∞SG Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-029',
        questionNumber: '29',
        questionText: 'Personel bilgilerine eri≈üim saƒülanabiliyor mu? (kan grubu, beden √∂l√ß√ºleri vb.)',
        category: 'iso9001',
        subcategory: 'Personel Bilgi Y√∂netimi',
        standardClause: '7.1.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Personel Bilgi Sistemi', 'Veri Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'Personel bilgilerine eri≈üimin saƒülandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Personel Bilgi Sistemi', 'Veri Tabanƒ±', 'Eri≈üim Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-030',
        questionNumber: '30',
        questionText: 'Acil m√ºdahale ekiplerinin yangƒ±n ve i≈ü g√ºvenliƒüi eƒüitimleri mevcut mu?',
        category: 'iso9001',
        subcategory: 'Acil M√ºdahale Eƒüitimleri',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Acil M√ºdahale Eƒüitimi', 'ƒ∞SG Eƒüitimleri'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Acil m√ºdahale ekiplerinin eƒüitimlerinin mevcut olduƒüunu kontrol edin',
        evidence: ['Eƒüitim Kayƒ±tlarƒ±', 'Sertifikalar', 'Eƒüitim Programlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-031',
        questionNumber: '31',
        questionText: 'Bu eƒüitimlerin deƒüerlendirmeleri yapƒ±lmƒ±≈ü mƒ± ve kayƒ±t altƒ±na alƒ±nmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Eƒüitim Deƒüerlendirme',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Eƒüitim Deƒüerlendirme', 'Kayƒ±t Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Eƒüitim deƒüerlendirmelerinin yapƒ±ldƒ±ƒüƒ±nƒ± ve kayƒ±t altƒ±na alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Deƒüerlendirme Formlarƒ±', 'Eƒüitim Kayƒ±tlarƒ±', 'Etkinlik Raporlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-032',
        questionNumber: '32',
        questionText: 'Yangƒ±n t√ºplerinin listesi mevcut mu? Dolum tarihleri takip ediliyor mu?',
        category: 'iso9001',
        subcategory: 'Yangƒ±n G√ºvenliƒüi',
        standardClause: '7.1.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Yangƒ±n G√ºvenliƒüi', 'Ekipman Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Yangƒ±n t√ºplerinin listesinin mevcut olduƒüunu ve dolum tarihlerinin takip edildiƒüini kontrol edin',
        evidence: ['Yangƒ±n T√ºp√º Listesi', 'Dolum Kayƒ±tlarƒ±', 'Bakƒ±m Planƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-033',
        questionNumber: '33',
        questionText: 'Acil durum telefonlarƒ± tanƒ±mlƒ± ve g√∂r√ºn√ºr yerlerde eri≈üilebilir mi?',
        category: 'iso9001',
        subcategory: 'Acil Durum ƒ∞leti≈üimi',
        standardClause: '7.4',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Acil Durum ƒ∞leti≈üimi', 'ƒ∞leti≈üim Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Acil durum telefonlarƒ±nƒ±n tanƒ±mlƒ± ve eri≈üilebilir olduƒüunu kontrol edin',
        evidence: ['Acil Durum Telefon Listesi', 'G√∂rsel Belgeler', 'Eri≈üilebilirlik Kontrol√º'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-034',
        questionNumber: '34',
        questionText: 'Personelin kullanacaƒüƒ± g√ºvenlik ekipmanlarƒ± tanƒ±mlƒ± mƒ±?',
        category: 'iso9001',
        subcategory: 'G√ºvenlik Ekipmanlarƒ±',
        standardClause: '7.1.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['G√ºvenlik Ekipmanlarƒ±', 'KKD Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Personelin kullanacaƒüƒ± g√ºvenlik ekipmanlarƒ±nƒ±n tanƒ±mlƒ± olduƒüunu kontrol edin',
        evidence: ['KKD Listesi', 'G√ºvenlik Ekipman Kataloƒüu', 'Kullanƒ±m Talimatlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-035',
        questionNumber: '35',
        questionText: 'Bu ekipmanlar personele zimmetlenmi≈ü mi?',
        category: 'iso9001',
        subcategory: 'Ekipman Zimmetleme',
        standardClause: '7.1.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Zimmet Y√∂netimi', 'Ekipman Takibi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'G√ºvenlik ekipmanlarƒ±nƒ±n personele zimmetlendiƒüini kontrol edin',
        evidence: ['Zimmet Kayƒ±tlarƒ±', 'Teslim Tutanaklarƒ±', 'Zimmet Listeleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-036',
        questionNumber: '36',
        questionText: 'ƒ∞√ß dok√ºmanlar (prosed√ºr, talimat, form vb.) tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Dok√ºmantasyon',
        standardClause: '7.5',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Dok√ºmantasyon', 'Dok√ºman Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞√ß dok√ºmanlarƒ±n tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Dok√ºman Listesi', 'Prosed√ºrler', 'Talimatlar', 'Formlar'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-037',
        questionNumber: '37',
        questionText: 'Dƒ±≈ü kaynaklƒ± dok√ºmanlar (standart, teknik resim, m√º≈üteri/tedarik√ßi dok√ºmanlarƒ±) tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Dƒ±≈ü Dok√ºmanlar',
        standardClause: '7.5',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Dƒ±≈ü Dok√ºman Y√∂netimi', 'Standart Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'Dƒ±≈ü kaynaklƒ± dok√ºmanlarƒ±n tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Dƒ±≈ü Dok√ºman Listesi', 'Standartlar', 'M√º≈üteri Dok√ºmanlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-038',
        questionNumber: '38',
        questionText: 'S√ºre√ßlerin i√ß ve dƒ±≈ü bilgi kaynaklarƒ±na ula≈üƒ±mƒ± saƒülanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Bilgi Eri≈üimi',
        standardClause: '7.5',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Bilgi Y√∂netimi', 'Eri≈üim Kontrol√º'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'S√ºre√ßlerin bilgi kaynaklarƒ±na eri≈üiminin saƒülandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Eri≈üim Kayƒ±tlarƒ±', 'Bilgi Sistemi', 'Kullanƒ±cƒ± Yetkileri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-039',
        questionNumber: '39',
        questionText: 'G√∂rev yapan t√ºm √ßalƒ±≈üanlarƒ±n yeterlilikleri tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'Yetkinlik',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Yetkinlik Tanƒ±mlama', 'Personel Deƒüerlendirme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'T√ºm √ßalƒ±≈üanlarƒ±n yeterliliklerinin tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Yetkinlik Matrisi', 'ƒ∞≈ü Tanƒ±mlarƒ±', 'Yeterlilik Kriterleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-040',
        questionNumber: '40',
        questionText: 'Eƒüitim ihtiya√ßlarƒ± analiz edilip planlanƒ±yor mu?',
        category: 'iso9001',
        subcategory: 'Eƒüitim Planlama',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Eƒüitim ƒ∞htiya√ß Analizi', 'Eƒüitim Planlama'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Eƒüitim ihtiya√ßlarƒ±nƒ±n analiz edildiƒüini ve planlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['ƒ∞htiya√ß Analizi Raporu', 'Eƒüitim Planƒ±', 'Analiz Formlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-041',
        questionNumber: '41',
        questionText: 'Yetkinlikler tanƒ±mlanƒ±rken eƒüitim, √∂ƒüretim, deneyim dikkate alƒ±nƒ±yor mu?',
        category: 'iso9001',
        subcategory: 'Yetkinlik Deƒüerlendirme',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Yetkinlik Deƒüerlendirme', 'Eƒüitim Y√∂netimi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Yetkinlik tanƒ±mlamada eƒüitim, √∂ƒüretim ve deneyimin dikkate alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Yetkinlik Deƒüerlendirme Kriterleri', 'Eƒüitim Kayƒ±tlarƒ±', 'Deneyim Belgeleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-042',
        questionNumber: '42',
        questionText: 'Eƒüitim faaliyetleri planlanƒ±yor, uygulanƒ±yor ve etkinliƒüi deƒüerlendiriliyor mu? Geli≈ütirmeler kayƒ±t altƒ±na alƒ±nƒ±yor mu?',
        category: 'iso9001',
        subcategory: 'Eƒüitim Y√∂netimi',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Eƒüitim Planlama', 'Eƒüitim Uygulama', 'Etkinlik Deƒüerlendirme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Eƒüitim faaliyetlerinin planlandƒ±ƒüƒ±nƒ±, uygulandƒ±ƒüƒ±nƒ± ve etkinliƒüinin deƒüerlendirildiƒüini kontrol edin',
        evidence: ['Eƒüitim Planƒ±', 'Uygulama Kayƒ±tlarƒ±', 'Etkinlik Raporlarƒ±', 'Geli≈ütirme Kayƒ±tlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-043',
        questionNumber: '43',
        questionText: 'Eƒüitim y√∂netimi i√ßin prosed√ºr mevcut mu?',
        category: 'iso9001',
        subcategory: 'Eƒüitim Prosed√ºr√º',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Prosed√ºr Y√∂netimi', 'Eƒüitim Sistemi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Eƒüitim y√∂netimi i√ßin prosed√ºr√ºn mevcut olduƒüunu kontrol edin',
        evidence: ['Eƒüitim Y√∂netimi Prosed√ºr√º', 'S√ºre√ß Tanƒ±mlarƒ±', 'ƒ∞≈ü Akƒ±≈ülarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-044',
        questionNumber: '44',
        questionText: '√úr√ºn/proses gereklerini etkileyen personel i√ßin eƒüitim planƒ± mevcut mu?',
        category: 'iso9001',
        subcategory: '√ñzel Eƒüitim Planlarƒ±',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['√ñzel Eƒüitim Planlama', '√úr√ºn Kalitesi'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: '√úr√ºn/proses gereklerini etkileyen personel i√ßin √∂zel eƒüitim planƒ±nƒ±n mevcut olduƒüunu kontrol edin',
        evidence: ['√ñzel Eƒüitim Planlarƒ±', '√úr√ºn Gereklilikleri', 'Proses Eƒüitimleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-045',
        questionNumber: '45',
        questionText: 'M√º≈üteri gerekliliklerine y√∂nelik eƒüitimler veriliyor mu? Kayƒ±tlarƒ± ve deƒüerlendirme sonu√ßlarƒ± mevcut mu?',
        category: 'iso9001',
        subcategory: 'M√º≈üteri Odaklƒ± Eƒüitimler',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['M√º≈üteri Eƒüitimleri', 'M√º≈üteri Memnuniyeti'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'M√º≈üteri gerekliliklerine y√∂nelik eƒüitimlerin verildiƒüini ve kayƒ±tlarƒ±nƒ±n mevcut olduƒüunu kontrol edin',
        evidence: ['M√º≈üteri Eƒüitim Kayƒ±tlarƒ±', 'Deƒüerlendirme Sonu√ßlarƒ±', 'M√º≈üteri Gereklilikleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-046',
        questionNumber: '46',
        questionText: 'Yeni i≈üe alƒ±nacak personelin nitelikleri tanƒ±mlanmƒ±≈ü mƒ±?',
        category: 'iso9001',
        subcategory: 'ƒ∞≈üe Alƒ±m Kriterleri',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['ƒ∞≈üe Alƒ±m', 'Nitelik Belirleme'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'Yeni i≈üe alƒ±nacak personelin niteliklerinin tanƒ±mlandƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['ƒ∞≈ü Tanƒ±mlarƒ±', 'Nitelik Kriterleri', 'ƒ∞≈üe Alƒ±m Prosed√ºr√º'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-047',
        questionNumber: '47',
        questionText: 'ƒ∞≈üe ba≈üvuran personel i√ßin ba≈üvuru formu tutuluyor mu?',
        category: 'iso9001',
        subcategory: 'Ba≈üvuru S√ºreci',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Ba≈üvuru Y√∂netimi', 'Kayƒ±t Tutma'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: false,
        weight: 3,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞≈üe ba≈üvuran personel i√ßin ba≈üvuru formunun tutulduƒüunu kontrol edin',
        evidence: ['Ba≈üvuru Formlarƒ±', 'Ba≈üvuru Kayƒ±tlarƒ±', 'Dosyalama Sistemi'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-048',
        questionNumber: '48',
        questionText: 'Yeni veya g√∂rev yeri deƒüi≈üen personel i√ßin i≈üba≈üƒ± eƒüitimleri kayƒ±t altƒ±na alƒ±nƒ±yor mu?',
        category: 'iso9001',
        subcategory: 'ƒ∞≈üba≈üƒ± Eƒüitimleri',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['ƒ∞≈üba≈üƒ± Eƒüitimi', 'Oryantasyon'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 4,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞≈üba≈üƒ± eƒüitimlerinin kayƒ±t altƒ±na alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['ƒ∞≈üba≈üƒ± Eƒüitim Kayƒ±tlarƒ±', 'Oryantasyon Programƒ±', 'Eƒüitim Formlarƒ±'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-049',
        questionNumber: '49',
        questionText: 'ƒ∞≈üba≈üƒ± eƒüitimleri tanƒ±mlƒ± mƒ± ve a≈üaƒüƒ±daki i√ßerikleri kapsƒ±yor mu? ‚Ä¢ M√º≈üteri ≈üartlarƒ±na uyumsuzluƒüun sonu√ßlarƒ± ‚Ä¢ G√ºnl√ºk g√∂rev tanƒ±mƒ± ‚Ä¢ M√º≈üteri √∂zel istekleri',
        category: 'iso9001',
        subcategory: 'ƒ∞≈üba≈üƒ± Eƒüitim ƒ∞√ßeriƒüi',
        standardClause: '7.2',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['ƒ∞≈üba≈üƒ± Eƒüitimi', 'M√º≈üteri Odaklƒ±lƒ±k'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'ƒ∞≈üba≈üƒ± eƒüitimlerinin belirtilen i√ßerikleri kapsadƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Eƒüitim M√ºfredatƒ±', 'Eƒüitim ƒ∞√ßerikleri', 'M√º≈üteri Gereklilikleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      },
      {
        id: 'ik-q-050',
        questionNumber: '50',
        questionText: 'Eƒüitim planlarƒ±nda a≈üaƒüƒ±daki konulara yer verilmi≈ü mi ve kayƒ±t altƒ±na alƒ±nmƒ±≈ü mƒ±? ‚Ä¢ Kalite politikasƒ± ‚Ä¢ Kalite hedefleri ‚Ä¢ KYS katkƒ±sƒ± ‚Ä¢ Uygunsuzluklara m√ºdahale',
        category: 'iso9001',
        subcategory: 'Farkƒ±ndalƒ±k Eƒüitimleri',
        standardClause: '7.3',
        department: 'ƒ∞nsan Kaynaklarƒ±',
        process: ['Farkƒ±ndalƒ±k Eƒüitimi', 'Kalite Bilinci'],
        answerType: 'yes_no',
        isRequired: true,
        isCritical: true,
        weight: 5,
        expectedAnswer: 'Evet',
        guidelines: 'Eƒüitim planlarƒ±nda belirtilen konularƒ±n yer aldƒ±ƒüƒ±nƒ± ve kayƒ±t altƒ±na alƒ±ndƒ±ƒüƒ±nƒ± kontrol edin',
        evidence: ['Eƒüitim Planlarƒ±', 'Farkƒ±ndalƒ±k Eƒüitim Kayƒ±tlarƒ±', 'Kalite Politikasƒ± Eƒüitimleri'],
        createdBy: 'Sistem',
        createdDate: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '00',
        isActive: true
      }
    ];

    const ikQuestionSet: DepartmentQuestionSet = {
      id: 'qs-ik-001',
      departmentId: 'insan-kaynaklari',
      departmentName: 'ƒ∞nsan Kaynaklarƒ±',
      version: '00',
      effectiveDate: new Date().toISOString().split('T')[0],
      createdBy: 'Sistem Y√∂neticisi',
      questions: ikQuestions,
      isActive: true,
      description: 'ƒ∞nsan Kaynaklarƒ± departmanƒ± i√ßin ISO 9001:2015 standardƒ±na uygun kapsamlƒ± 50 soruluk tetkik listesi. Kurulu≈ü baƒülamƒ±, risk y√∂netimi, kalite hedefleri, insan kaynaklarƒ± y√∂netimi, yetkinlik, farkƒ±ndalƒ±k, eƒüitim y√∂netimi, acil durum planlarƒ±, g√ºvenlik ekipmanlarƒ±, dok√ºmantasyon ve performans izleme konularƒ±nƒ± kapsar.',
      estimatedDuration: 180 // 3 saat
    };

    setQuestionSets([ikQuestionSet]);
  };

  const calculateMetrics = (plans: AuditPlan[], findings: Finding[], actions: Action[]) => {
    const metrics: AuditMetrics = {
      totalAudits: plans.length,
      completedAudits: plans.filter(p => p.status === 'completed').length,
      onTimeCompletion: 85,
      totalFindings: findings.length,
      findingsByType: {
        'nonconformity': findings.filter(f => f.type === 'nonconformity').length,
        'improvement_opportunity': findings.filter(f => f.type === 'improvement_opportunity').length,
        'positive_finding': findings.filter(f => f.type === 'positive_finding').length,
        'observation': findings.filter(f => f.type === 'observation').length
      },
      findingsBySeverity: {
        'major': findings.filter(f => f.severity === 'major').length,
        'minor': findings.filter(f => f.severity === 'minor').length,
        'observation': findings.filter(f => f.severity === 'observation').length
      },
      openActions: actions.filter(a => a.status !== 'completed').length,
      overdueActions: actions.filter(a => a.status === 'overdue').length,
      actionCompletionRate: Math.round((actions.filter(a => a.status === 'completed').length / actions.length) * 100) || 0,
      departmentPerformance: {
        '√úretim': 85,
        'Kalite': 92,
        'Satƒ±n Alma': 78,
        '√áevre': 88,
        'ƒ∞K': 90
      }
    };
    setMetrics(metrics);
  };

  // Event Handlers
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleNewAudit = () => {
    setDialogType('plan');
    setSelectedItem(null);
    setFormStep(0);
    setFormData({
      title: '',
      description: '',
      auditType: 'internal',
      scope: [],
      department: '',
      process: [],
      plannedDate: '',
      duration: 8,
      auditorTeam: [],
      auditees: [],
      standards: [],
      priority: 'medium',
      findingNumber: '',
      type: 'nonconformity',
      severity: 'minor',
      category: '',
      clause: '',
      requirement: '',
      evidence: '',
      location: '',
      discoveredDate: '',
      discoveredBy: '',
      actionNumber: '',
      actionType: 'corrective',
      actionDescription: '',
      responsible: '',
      targetDate: '',
      verificationRequired: true,
      verificationMethod: '',
      verificationDate: '',
      verificationBy: '',
      resources: '',
      budget: 0,
      expectedResult: '',
      riskAssessment: '',
      successCriteria: ''
    });
    setDialogOpen(true);
  };

  const handleFormDataChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleNextStep = () => {
    if (formStep < 3) {
      setFormStep(formStep + 1);
    }
  };

  const handlePrevStep = () => {
    if (formStep > 0) {
      setFormStep(formStep - 1);
    }
  };

  const validateStep = (step: number): boolean => {
    if (dialogType === 'action') {
      switch (step) {
        case 0: // Aksiyon Temel Bilgileri
          return formData.actionNumber.trim() !== '' && 
                 formData.actionDescription.trim() !== '' && 
                 formData.actionType.trim() !== '';
        case 1: // Sorumlu ve Zamanlama
          return formData.responsible.trim() !== '' && 
                 formData.targetDate !== '' && 
                 formData.expectedResult.trim() !== '';
        case 2: // Kaynak ve Doƒürulama
          return formData.resources.trim() !== '' && 
                 formData.verificationMethod.trim() !== '' && 
                 formData.successCriteria.trim() !== '';
        default:
          return true;
      }
    } else if (dialogType === 'finding') {
      switch (step) {
        case 0: // Bulgu Temel Bilgileri
          return formData.findingNumber.trim() !== '' && 
                 formData.description.trim() !== '' && 
                 formData.category.trim() !== '';
        case 1: // Standart ve Gereksinimler
          return formData.clause.trim() !== '' && 
                 formData.department !== '' && 
                 formData.requirement.trim() !== '' && 
                 formData.evidence.trim() !== '';
        case 2: // Lokasyon ve Sorumlu
          return formData.location.trim() !== '' && 
                 formData.process.toString().trim() !== '' && 
                 formData.discoveredDate !== '' && 
                 formData.discoveredBy.trim() !== '';
        default:
          return true;
      }
    } else {
      // Plan validation
      switch (step) {
        case 0: // Temel Bilgiler
          return formData.title.trim() !== '' && 
                 formData.description.trim() !== '' && 
                 formData.auditType.trim() !== '';
        case 1: // Kapsam ve Detaylar
          return formData.department !== '' && 
                 formData.scope.length > 0 && 
                 formData.process.length > 0;
        case 2: // Zamanlama ve Standartlar
          return formData.plannedDate !== '' && 
                 formData.duration > 0 && 
                 formData.standards.length > 0;
        case 3: // Takƒ±m ve Sorumlu
          return formData.auditorTeam.length > 0;
        default:
          return true;
      }
    }
  };

  const getStepIcon = (step: number) => {
    switch (step) {
      case 0: return <DescriptionIcon />;
      case 1: return <BusinessIcon />;
      case 2: return <DateRangeIcon />;
      case 3: return <TeamIcon />;
      default: return <CheckIcon />;
    }
  };

  const handleEditAudit = (audit: AuditPlan) => {
    setDialogType('plan');
    setSelectedItem(audit);
    setDialogOpen(true);
  };

  const handleStartAudit = (plan: AuditPlan) => {
    const departmentQuestionSet = questionSets.find(qs => 
      qs.departmentName === plan.department && qs.isActive
    );

    if (!departmentQuestionSet) {
      setSnackbarMessage(`${plan.department} departmanƒ± i√ßin soru listesi bulunamadƒ±.`);
      setSnackbarOpen(true);
      return;
    }

    setAuditPlans(prev => prev.map(p => 
      p.id === plan.id ? { ...p, status: 'in_progress' as const } : p
    ));
    setSnackbarMessage('Denetim ba≈ülatƒ±ldƒ±!');
    setSnackbarOpen(true);
  };

  const handleOpenAuditForm = (plan: AuditPlan) => {
    setSnackbarMessage('Denetim formu a√ßƒ±lƒ±yor...');
    setSnackbarOpen(true);
  };

  const handleNewFinding = () => {
    setDialogType('finding');
    setSelectedItem(null);
    setFormStep(0);
    setFormData({
      title: '',
      description: '',
      auditType: 'internal',
      scope: [],
      department: '',
      process: [],
      plannedDate: '',
      duration: 8,
      auditorTeam: [],
      auditees: [],
      standards: [],
      priority: 'medium',
      // Finding specific fields
      findingNumber: '',
      type: 'nonconformity',
      severity: 'minor',
      category: '',
      clause: '',
      requirement: '',
      evidence: '',
      location: '',
      discoveredDate: new Date().toISOString().split('T')[0],
      discoveredBy: 'Mevcut Denet√ßi',
      actionNumber: '',
      actionType: 'corrective',
      actionDescription: '',
      responsible: '',
      targetDate: '',
      verificationRequired: true,
      verificationMethod: '',
      verificationDate: '',
      verificationBy: '',
      resources: '',
      budget: 0,
      expectedResult: '',
      riskAssessment: '',
      successCriteria: ''
    });
    setDialogOpen(true);
  };

  const handleEditFinding = (finding: Finding) => {
    setDialogType('finding');
    setSelectedItem(finding);
    setDialogOpen(true);
  };

  const handleNewAction = () => {
    setDialogType('action');
    setSelectedItem(null);
    setFormStep(0);
    setFormData({
      title: '',
      description: '',
      auditType: 'internal',
      scope: [],
      department: '',
      process: [],
      plannedDate: '',
      duration: 8,
      auditorTeam: [],
      auditees: [],
      standards: [],
      priority: 'medium',
      findingNumber: '',
      type: 'nonconformity',
      severity: 'minor',
      category: '',
      clause: '',
      requirement: '',
      evidence: '',
      location: '',
      discoveredDate: new Date().toISOString().split('T')[0],
      discoveredBy: 'Mevcut Denet√ßi',
      // Action specific fields
      actionNumber: '',
      actionType: 'corrective',
      actionDescription: '',
      responsible: '',
      targetDate: '',
      verificationRequired: true,
      verificationMethod: '',
      verificationDate: '',
      verificationBy: '',
      resources: '',
      budget: 0,
      expectedResult: '',
      riskAssessment: '',
      successCriteria: ''
    });
    setDialogOpen(true);
  };

  const handleEditAction = (action: Action) => {
    setDialogType('action');
    setSelectedItem(action);
    setDialogOpen(true);
  };

  const handleDeleteItem = (id: string, type: string) => {
    if (window.confirm('Bu √∂ƒüeyi silmek istediƒüinizden emin misiniz?')) {
      switch (type) {
        case 'plan':
          setAuditPlans(prev => prev.filter(p => p.id !== id));
          break;
        case 'finding':
          setFindings(prev => prev.filter(f => f.id !== id));
          break;
        case 'action':
          setActions(prev => prev.filter(a => a.id !== id));
          break;
      }
      setSnackbarMessage('√ñƒüe ba≈üarƒ±yla silindi');
      setSnackbarOpen(true);
    }
  };

  const handleSaveItem = () => {
    setDialogOpen(false);
    setSnackbarMessage('Deƒüi≈üiklikler ba≈üarƒ±yla kaydedildi');
    setSnackbarOpen(true);
    // Recalculate metrics after save
    calculateMetrics(auditPlans, findings, actions);
  };

  const handleExportReport = () => {
    setSnackbarMessage('Rapor dƒ±≈üa aktarƒ±lƒ±yor...');
    setSnackbarOpen(true);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return '#4caf50';
      case 'in_progress': return '#ff9800';
      case 'planned': return '#2196f3';
      case 'overdue': return '#f44336';
      case 'cancelled': return '#9c27b0';
      default: return theme.palette.grey[500];
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'low': return '#4caf50';
      case 'medium': return '#ff9800';
      case 'high': return '#f44336';
      case 'critical': return '#9c27b0';
      default: return theme.palette.grey[500];
    }
  };

  // Dashboard Component
  const Dashboard = () => (
    <Box>
      <Box display="grid" gridTemplateColumns="repeat(auto-fit, minmax(250px, 1fr))" gap={3} mb={3}>
        {/* KPI Cards */}
        <StyledCard>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography color="textSecondary" gutterBottom variant="body2">
                  Toplam Tetkik
                </Typography>
                <Typography variant="h4" component="div" color="primary">
                  {metrics?.totalAudits || 0}
                </Typography>
              </Box>
              <Avatar sx={{ bgcolor: theme.palette.primary.main }}>
                <AuditIcon />
              </Avatar>
            </Box>
          </CardContent>
        </StyledCard>

        <StyledCard>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography color="textSecondary" gutterBottom variant="body2">
                  Tamamlanan
                </Typography>
                <Typography variant="h4" component="div" color="success.main">
                  {metrics?.completedAudits || 0}
                </Typography>
              </Box>
              <Avatar sx={{ bgcolor: theme.palette.success.main }}>
                <CheckIcon />
              </Avatar>
            </Box>
          </CardContent>
        </StyledCard>

        <StyledCard>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography color="textSecondary" gutterBottom variant="body2">
                  Toplam Bulgu
                </Typography>
                <Typography variant="h4" component="div" color="warning.main">
                  {metrics?.totalFindings || 0}
                </Typography>
              </Box>
              <Avatar sx={{ bgcolor: theme.palette.warning.main }}>
                <WarningIcon />
              </Avatar>
            </Box>
          </CardContent>
        </StyledCard>

        <StyledCard>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography color="textSecondary" gutterBottom variant="body2">
                  Aksiyon Tamamlama
                </Typography>
                <Typography variant="h4" component="div" color="info.main">
                  %{metrics?.actionCompletionRate || 0}
                </Typography>
              </Box>
              <Avatar sx={{ bgcolor: theme.palette.info.main }}>
                <TrendingUpIcon />
              </Avatar>
            </Box>
          </CardContent>
        </StyledCard>
      </Box>

      <Box display="flex" flexDirection={isMobile ? 'column' : 'row'} gap={3}>
        {/* Recent Activities */}
        <Box flex={2}>
          <StyledCard>
            <CardHeader 
              title="Son Tetkikler" 
              action={
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<ViewIcon />}
                  onClick={() => setActiveTab(1)}
                >
                  T√ºm√ºn√º G√∂r
                </Button>
              }
            />
            <CardContent>
              <List>
                {auditPlans.slice(0, 5).map((audit) => (
                  <ListItem key={audit.id}>
                    <ListItemIcon>
                      <AuditIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText
                      primary={audit.title}
                      secondary={
                        <Box display="flex" alignItems="center" gap={1} mt={0.5}>
                          <Typography variant="caption" color="textSecondary">
                            {audit.department} ‚Ä¢ {new Date(audit.plannedDate).toLocaleDateString('tr-TR')}
                          </Typography>
                          <StatusChip 
                            status={audit.status} 
                            label={audit.status === 'completed' ? 'Tamamlandƒ±' : 
                                   audit.status === 'in_progress' ? 'Devam Ediyor' :
                                   audit.status === 'planned' ? 'Planlandƒ±' : 'Gecikmi≈ü'} 
                            size="small" 
                          />
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </StyledCard>
        </Box>

        {/* Department Performance */}
        <Box flex={1}>
          <StyledCard>
            <CardHeader title="Departman Performansƒ±" />
            <CardContent>
              <Box display="flex" flexDirection="column" gap={2}>
                {metrics?.departmentPerformance && Object.entries(metrics.departmentPerformance).map(([dept, score]) => (
                  <Box key={dept}>
                    <Box display="flex" justifyContent="space-between" mb={0.5}>
                      <Typography variant="body2">{dept}</Typography>
                      <Typography variant="body2" fontWeight={600}>%{score}</Typography>
                    </Box>
                    <LinearProgress 
                      variant="determinate" 
                      value={score} 
                      sx={{ 
                        height: 8, 
                        borderRadius: 4,
                        backgroundColor: theme.palette.grey[200],
                        '& .MuiLinearProgress-bar': {
                          backgroundColor: score >= 90 ? '#4caf50' : score >= 75 ? '#ff9800' : '#f44336'
                        }
                      }}
                    />
                  </Box>
                ))}
              </Box>
            </CardContent>
          </StyledCard>
        </Box>
      </Box>

      <Box mt={3}>
        <Box display="flex" flexWrap="wrap" gap={3}>
          {/* Findings by Type */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader 
                title="Bulgu T√ºrleri" 
                action={
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<ViewIcon />}
                    onClick={() => setActiveTab(2)}
                  >
                    Detay
                  </Button>
                }
              />
              <CardContent>
                {metrics?.findingsByType && Object.entries(metrics.findingsByType).map(([type, count]) => (
                  <Box key={type} display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                    <Typography variant="body2">
                      {type === 'nonconformity' ? 'Uygunsuzluk' :
                       type === 'improvement_opportunity' ? 'ƒ∞yile≈ütirme Fƒ±rsatƒ±' :
                       type === 'positive_finding' ? 'Pozitif Bulgu' : 'G√∂zlem'}
                    </Typography>
                    <Chip 
                      label={count} 
                      size="small" 
                      color={type === 'nonconformity' ? 'error' : 
                             type === 'improvement_opportunity' ? 'warning' : 'success'}
                    />
                  </Box>
                ))}
              </CardContent>
            </StyledCard>
          </Box>

          {/* Quick Actions */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader title="Hƒ±zlƒ± ƒ∞≈ülemler" />
              <CardContent>
                <Box display="flex" flexDirection="column" gap={2}>
                  <Button 
                    variant="contained" 
                    startIcon={<AddIcon />}
                    onClick={handleNewAudit}
                    fullWidth
                  >
                    Yeni Tetkik Planla
                  </Button>
                  <Button 
                    variant="outlined" 
                    startIcon={<WarningIcon />}
                    onClick={handleNewFinding}
                    fullWidth
                  >
                    Bulgu Ekle
                  </Button>
                  <Button 
                    variant="outlined" 
                    startIcon={<TimelineIcon />}
                    onClick={handleNewAction}
                    fullWidth
                  >
                    Aksiyon Ata
                  </Button>
                  <Button 
                    variant="outlined" 
                    startIcon={<ReportIcon />}
                    onClick={handleExportReport}
                    fullWidth
                  >
                    Rapor Olu≈ütur
                  </Button>
                </Box>
              </CardContent>
            </StyledCard>
          </Box>
        </Box>
      </Box>
    </Box>
  );

  // Audit Plans Component
  const AuditPlans = () => {
    const filteredPlans = auditPlans.filter(plan => {
      const matchesSearch = plan.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           plan.department.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = !statusFilter || plan.status === statusFilter;
      const matchesType = !typeFilter || plan.auditType === typeFilter;
      const matchesDepartment = !departmentFilter || plan.department === departmentFilter;
      
      return matchesSearch && matchesStatus && matchesType && matchesDepartment;
    });

    return (
      <Box>
        {/* Filters */}
        <Paper sx={{ p: 2, mb: 3 }}>
          <Box display="flex" flexWrap="wrap" gap={2} alignItems="center">
            <Box flex="1 1 300px" minWidth="200px">
              <UltraStableSearchInput
                value={searchTerm}
                onChange={(value) => setSearchTerm(value)}
                placeholder="Tetkik ara..."
                label=""
                size="small"
                fullWidth={true}
              />
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>Durum</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  label="Durum"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="planned">Planlandƒ±</MenuItem>
                  <MenuItem value="in_progress">Devam Ediyor</MenuItem>
                  <MenuItem value="completed">Tamamlandƒ±</MenuItem>
                  <MenuItem value="overdue">Gecikmi≈ü</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>T√ºr</InputLabel>
                <Select
                  value={typeFilter}
                  onChange={(e) => setTypeFilter(e.target.value)}
                  label="T√ºr"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="internal">ƒ∞√ß Tetkik</MenuItem>
                  <MenuItem value="cross">√áapraz Tetkik</MenuItem>
                  <MenuItem value="supplier">Tedarik√ßi</MenuItem>
                  <MenuItem value="process">S√ºre√ß</MenuItem>
                  <MenuItem value="system">Sistem</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>Departman</InputLabel>
                <Select
                  value={departmentFilter}
                  onChange={(e) => setDepartmentFilter(e.target.value)}
                  label="Departman"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="√úretim">√úretim</MenuItem>
                  <MenuItem value="Kalite">Kalite</MenuItem>
                  <MenuItem value="Satƒ±n Alma">Satƒ±n Alma</MenuItem>
                  <MenuItem value="√áevre">√áevre</MenuItem>
                  <MenuItem value="ƒ∞K">ƒ∞K</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box display="flex" gap={1}>
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleNewAudit}
              >
                Yeni Tetkik
              </Button>
              <Button
                variant="outlined"
                startIcon={<ExportIcon />}
                onClick={handleExportReport}
              >
                Dƒ±≈üa Aktar
              </Button>
            </Box>
          </Box>
        </Paper>

        {/* Audit Plans Table */}
        <Paper sx={{ width: '100%', overflow: 'hidden' }}>
          <TableContainer sx={{ maxHeight: 440 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>Tetkik Ba≈ülƒ±ƒüƒ±</TableCell>
                  <TableCell>T√ºr</TableCell>
                  <TableCell>Departman</TableCell>
                  <TableCell>Planlanan Tarih</TableCell>
                  <TableCell>S√ºre</TableCell>
                  <TableCell>Durum</TableCell>
                  <TableCell>√ñncelik</TableCell>
                  <TableCell>Denet√ßi</TableCell>
                  <TableCell align="center">ƒ∞≈ülemler</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredPlans
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((plan) => (
                    <TableRow key={plan.id} hover>
                      <TableCell>
                        <Box>
                          <Typography variant="subtitle2" fontWeight={600}>
                            {plan.title}
                          </Typography>
                          <Typography variant="caption" color="textSecondary">
                            {plan.description}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={
                            plan.auditType === 'internal' ? 'ƒ∞√ß Tetkik' :
                            plan.auditType === 'cross' ? '√áapraz' :
                            plan.auditType === 'supplier' ? 'Tedarik√ßi' :
                            plan.auditType === 'process' ? 'S√ºre√ß' : 'Sistem'
                          }
                          size="small"
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell>{plan.department}</TableCell>
                      <TableCell>{new Date(plan.plannedDate).toLocaleDateString('tr-TR')}</TableCell>
                      <TableCell>{plan.duration} saat</TableCell>
                      <TableCell>
                        <StatusChip 
                          status={plan.status}
                          label={
                            plan.status === 'planned' ? 'Planlandƒ±' :
                            plan.status === 'in_progress' ? 'Devam Ediyor' :
                            plan.status === 'completed' ? 'Tamamlandƒ±' : 'Gecikmi≈ü'
                          }
                          size="small"
                        />
                      </TableCell>
                      <TableCell>
                        <PriorityChip 
                          priority={plan.priority}
                          label={plan.priority === 'low' ? 'D√º≈ü√ºk' :
                                 plan.priority === 'medium' ? 'Orta' :
                                 plan.priority === 'high' ? 'Y√ºksek' : 'Kritik'}
                          size="small"
                        />
                      </TableCell>
                      <TableCell>
                        {plan.auditorTeam[0]?.name || 'Atanmadƒ±'}
                      </TableCell>
                      <TableCell align="center">
                        <Box display="flex" gap={0.5}>
                          {plan.status === 'planned' && (
                            <Tooltip title="Denetime Ba≈üla">
                              <IconButton 
                                size="small" 
                                color="success"
                                onClick={() => handleStartAudit(plan)}
                                sx={{ bgcolor: 'success.light', color: 'white', '&:hover': { bgcolor: 'success.main' } }}
                              >
                                <PlayArrowIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          )}
                          {plan.status === 'in_progress' && (
                            <Tooltip title="Denetim Formunu A√ß">
                              <IconButton 
                                size="small" 
                                color="warning"
                                onClick={() => handleOpenAuditForm(plan)}
                                sx={{ bgcolor: 'warning.light', color: 'white', '&:hover': { bgcolor: 'warning.main' } }}
                              >
                                <AssignmentIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          )}
                          <Tooltip title="G√∂r√ºnt√ºle">
                            <IconButton 
                              size="small" 
                              color="primary"
                              onClick={() => {
                                setSelectedItem(plan);
                                setDialogType('plan');
                                setDialogOpen(true);
                              }}
                            >
                              <ViewIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="D√ºzenle">
                            <IconButton 
                              size="small" 
                              color="primary"
                              onClick={() => handleEditAudit(plan)}
                            >
                              <EditIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Sil">
                            <IconButton 
                              size="small" 
                              color="error"
                              onClick={() => handleDeleteItem(plan.id, 'plan')}
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={filteredPlans.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={(event, newPage) => setPage(newPage)}
            onRowsPerPageChange={(event) => {
              setRowsPerPage(parseInt(event.target.value, 10));
              setPage(0);
            }}
          />
        </Paper>
      </Box>
    );
  };

  // Findings Component
  const FindingsComponent = () => {
    const filteredFindings = findings.filter(finding => {
      const matchesSearch = finding.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           finding.findingNumber.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = !statusFilter || finding.status === statusFilter;
      const matchesDepartment = !departmentFilter || finding.department === departmentFilter;
      
      return matchesSearch && matchesStatus && matchesDepartment;
    });

    return (
      <Box>
        {/* Filters */}
        <Paper sx={{ p: 2, mb: 3 }}>
          <Box display="flex" flexWrap="wrap" gap={2} alignItems="center">
            <Box flex="1 1 300px" minWidth="200px">
              <TextField
                fullWidth
                size="small"
                placeholder="Bulgu ara..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: <SearchIcon color="action" sx={{ mr: 1 }} />
                }}
              />
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>Durum</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  label="Durum"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="open">A√ßƒ±k</MenuItem>
                  <MenuItem value="action_assigned">Aksiyon Atandƒ±</MenuItem>
                  <MenuItem value="in_progress">Devam Ediyor</MenuItem>
                  <MenuItem value="verification_pending">Doƒürulama Bekliyor</MenuItem>
                  <MenuItem value="closed">Kapalƒ±</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>Departman</InputLabel>
                <Select
                  value={departmentFilter}
                  onChange={(e) => setDepartmentFilter(e.target.value)}
                  label="Departman"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="√úretim">√úretim</MenuItem>
                  <MenuItem value="Kalite">Kalite</MenuItem>
                  <MenuItem value="Satƒ±n Alma">Satƒ±n Alma</MenuItem>
                  <MenuItem value="√áevre">√áevre</MenuItem>
                  <MenuItem value="ƒ∞K">ƒ∞K</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box display="flex" gap={1}>
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleNewFinding}
              >
                Yeni Bulgu
              </Button>
              <Button
                variant="outlined"
                startIcon={<ExportIcon />}
                onClick={handleExportReport}
              >
                Dƒ±≈üa Aktar
              </Button>
            </Box>
          </Box>
        </Paper>

        {/* Findings Cards */}
        <Box display="flex" flexWrap="wrap" gap={2}>
          {filteredFindings.map((finding) => (
            <StyledCard key={finding.id} sx={{ flex: '1 1 350px', maxWidth: '500px' }}>
              <CardHeader
                avatar={
                  <Avatar sx={{ 
                    bgcolor: finding.severity === 'major' ? '#f44336' : 
                            finding.severity === 'minor' ? '#ff9800' : '#4caf50' 
                  }}>
                    <WarningIcon />
                  </Avatar>
                }
                title={
                  <Box display="flex" alignItems="center" gap={1}>
                    <Typography variant="h6">{finding.findingNumber}</Typography>
                    <StatusChip 
                      status={finding.status}
                      label={
                        finding.status === 'open' ? 'A√ßƒ±k' :
                        finding.status === 'action_assigned' ? 'Aksiyon Atandƒ±' :
                        finding.status === 'in_progress' ? 'Devam Ediyor' :
                        finding.status === 'verification_pending' ? 'Doƒürulama Bekliyor' : 'Kapalƒ±'
                      }
                      size="small"
                    />
                  </Box>
                }
                subheader={
                  <Box display="flex" flexWrap="wrap" gap={1} mt={1}>
                    <Chip 
                      label={finding.type === 'nonconformity' ? 'Uygunsuzluk' :
                             finding.type === 'improvement_opportunity' ? 'ƒ∞yile≈ütirme' :
                             finding.type === 'positive_finding' ? 'Pozitif' : 'G√∂zlem'}
                      size="small"
                      color={finding.type === 'nonconformity' ? 'error' : 
                             finding.type === 'improvement_opportunity' ? 'warning' : 'success'}
                    />
                    <PriorityChip 
                      priority={finding.severity}
                      label={finding.severity === 'major' ? 'Maj√∂r' :
                             finding.severity === 'minor' ? 'Min√∂r' : 'G√∂zlem'}
                      size="small"
                    />
                  </Box>
                }
                action={
                  <Box display="flex" gap={0.5}>
                    <Tooltip title="D√ºzenle">
                      <IconButton 
                        size="small" 
                        color="primary"
                        onClick={() => handleEditFinding(finding)}
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Sil">
                      <IconButton 
                        size="small" 
                        color="error"
                        onClick={() => handleDeleteItem(finding.id, 'finding')}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  </Box>
                }
              />
              <CardContent>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>Kategori:</strong> {finding.category}
                </Typography>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>Madde:</strong> {finding.clause}
                </Typography>
                <Typography variant="body2" gutterBottom>
                  <strong>A√ßƒ±klama:</strong> {finding.description}
                </Typography>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>Kanƒ±t:</strong> {finding.evidence}
                </Typography>
                <Box display="flex" justifyContent="space-between" alignItems="center" mt={2}>
                  <Typography variant="caption" color="textSecondary">
                    {finding.department} ‚Ä¢ {new Date(finding.discoveredDate).toLocaleDateString('tr-TR')}
                  </Typography>
                  <Typography variant="caption" color="textSecondary">
                    {finding.discoveredBy}
                  </Typography>
                </Box>
              </CardContent>
            </StyledCard>
          ))}
        </Box>
      </Box>
    );
  };

  // Actions Component
  const ActionsComponent = () => {
    const filteredActions = actions.filter(action => {
      const matchesSearch = action.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           action.responsible.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = !statusFilter || action.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    });

    return (
      <Box>
        {/* Filters */}
        <Paper sx={{ p: 2, mb: 3 }}>
          <Box display="flex" flexWrap="wrap" gap={2} alignItems="center">
            <Box flex="1 1 300px" minWidth="200px">
              <TextField
                fullWidth
                size="small"
                placeholder="Aksiyon ara..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: <SearchIcon color="action" sx={{ mr: 1 }} />
                }}
              />
            </Box>
            <Box flex="1 1 150px" minWidth="120px">
              <FormControl fullWidth size="small">
                <InputLabel>Durum</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  label="Durum"
                >
                  <MenuItem value="">T√ºm√º</MenuItem>
                  <MenuItem value="assigned">Atandƒ±</MenuItem>
                  <MenuItem value="in_progress">Devam Ediyor</MenuItem>
                  <MenuItem value="completed">Tamamlandƒ±</MenuItem>
                  <MenuItem value="overdue">Gecikmi≈ü</MenuItem>
                  <MenuItem value="verified">Doƒürulandƒ±</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box display="flex" gap={1}>
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleNewAction}
              >
                Yeni Aksiyon
              </Button>
              <Button
                variant="outlined"
                startIcon={<ExportIcon />}
                onClick={handleExportReport}
              >
                Dƒ±≈üa Aktar
              </Button>
            </Box>
          </Box>
        </Paper>

        {/* Actions Cards */}
        <Box display="flex" flexWrap="wrap" gap={2}>
          {filteredActions.map((action) => (
            <StyledCard key={action.id} sx={{ flex: '1 1 350px', maxWidth: '500px' }}>
              <CardHeader
                avatar={
                  <Avatar sx={{ 
                    bgcolor: action.actionType === 'corrective' ? '#f44336' : 
                            action.actionType === 'preventive' ? '#ff9800' : '#4caf50' 
                  }}>
                    <TimelineIcon />
                  </Avatar>
                }
                title={
                  <Box display="flex" alignItems="center" gap={1}>
                    <Typography variant="h6">
                      {action.actionType === 'corrective' ? 'D√ºzeltici' :
                       action.actionType === 'preventive' ? '√ñnleyici' : 'ƒ∞yile≈ütirme'} Aksiyon
                    </Typography>
                    <StatusChip 
                      status={action.status}
                      label={
                        action.status === 'assigned' ? 'Atandƒ±' :
                        action.status === 'in_progress' ? 'Devam Ediyor' :
                        action.status === 'completed' ? 'Tamamlandƒ±' :
                        action.status === 'overdue' ? 'Gecikmi≈ü' : 'Doƒürulandƒ±'
                      }
                      size="small"
                    />
                  </Box>
                }
                subheader={
                  <Box mt={1}>
                    <LinearProgress 
                      variant="determinate" 
                      value={action.progress} 
                      sx={{ 
                        height: 8, 
                        borderRadius: 4,
                        backgroundColor: theme.palette.grey[200],
                        '& .MuiLinearProgress-bar': {
                          backgroundColor: action.progress >= 90 ? '#4caf50' : 
                                          action.progress >= 50 ? '#ff9800' : '#f44336'
                        }
                      }}
                    />
                    <Typography variant="caption" color="textSecondary" sx={{ mt: 0.5, display: 'block' }}>
                      %{action.progress} tamamlandƒ±
                    </Typography>
                  </Box>
                }
                action={
                  <Box display="flex" gap={0.5}>
                    <Tooltip title="D√ºzenle">
                      <IconButton 
                        size="small" 
                        color="primary"
                        onClick={() => handleEditAction(action)}
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Sil">
                      <IconButton 
                        size="small" 
                        color="error"
                        onClick={() => handleDeleteItem(action.id, 'action')}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  </Box>
                }
              />
              <CardContent>
                <Typography variant="body2" gutterBottom>
                  <strong>A√ßƒ±klama:</strong> {action.description}
                </Typography>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>Sorumlu:</strong> {action.responsible}
                </Typography>
                <Box display="flex" justifyContent="space-between" alignItems="center" mt={2}>
                  <Typography variant="caption" color="textSecondary">
                    Hedef: {new Date(action.targetDate).toLocaleDateString('tr-TR')}
                  </Typography>
                  {action.actualCompletionDate && (
                    <Typography variant="caption" color="success.main">
                      Tamamlandƒ±: {new Date(action.actualCompletionDate).toLocaleDateString('tr-TR')}
                    </Typography>
                  )}
                </Box>
                {action.verificationRequired && (
                  <Box mt={1}>
                    <Chip 
                      label="Doƒürulama Gerekli" 
                      size="small" 
                      color="warning" 
                      icon={<VerifiedIcon />}
                    />
                  </Box>
                )}
              </CardContent>
            </StyledCard>
          ))}
        </Box>
      </Box>
    );
  };

  // Reports Component
  const ReportsComponent = () => {
    const [reportType, setReportType] = useState('audit_summary');
    const [dateFrom, setDateFrom] = useState('2024-01-01');
    const [dateTo, setDateTo] = useState('2024-12-31');

    const generateReport = () => {
      setSnackbarMessage('Rapor olu≈üturuluyor...');
      setSnackbarOpen(true);
    };

    return (
      <Box>
        <Box display="flex" flexWrap="wrap" gap={3}>
          {/* Report Generator */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader 
                title="Rapor Olu≈üturucu" 
                avatar={<ReportIcon color="primary" />}
              />
              <CardContent>
                <Box display="flex" flexDirection="column" gap={3}>
                  <FormControl fullWidth>
                    <InputLabel>Rapor T√ºr√º</InputLabel>
                    <Select
                      value={reportType}
                      onChange={(e) => setReportType(e.target.value)}
                      label="Rapor T√ºr√º"
                    >
                      <MenuItem value="audit_summary">Tetkik √ñzet Raporu</MenuItem>
                      <MenuItem value="findings_report">Bulgular Raporu</MenuItem>
                      <MenuItem value="actions_report">Aksiyonlar Raporu</MenuItem>
                      <MenuItem value="performance_report">Performans Raporu</MenuItem>
                      <MenuItem value="compliance_report">Uygunluk Raporu</MenuItem>
                      <MenuItem value="trend_analysis">Trend Analizi</MenuItem>
                    </Select>
                  </FormControl>

                  <TextField
                    label="Ba≈ülangƒ±√ß Tarihi"
                    type="date"
                    value={dateFrom}
                    onChange={(e) => setDateFrom(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                  />

                  <TextField
                    label="Biti≈ü Tarihi"
                    type="date"
                    value={dateTo}
                    onChange={(e) => setDateTo(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                  />

                  <FormControl fullWidth>
                    <InputLabel>Departman</InputLabel>
                    <Select
                      value={departmentFilter}
                      onChange={(e) => setDepartmentFilter(e.target.value)}
                      label="Departman"
                    >
                      <MenuItem value="">T√ºm√º</MenuItem>
                      <MenuItem value="√úretim">√úretim</MenuItem>
                      <MenuItem value="Kalite">Kalite</MenuItem>
                      <MenuItem value="Satƒ±n Alma">Satƒ±n Alma</MenuItem>
                      <MenuItem value="√áevre">√áevre</MenuItem>
                      <MenuItem value="ƒ∞K">ƒ∞K</MenuItem>
                    </Select>
                  </FormControl>

                  <Box display="flex" gap={2}>
                    <Button
                      variant="contained"
                      fullWidth
                      startIcon={<PrintIcon />}
                      onClick={generateReport}
                    >
                      PDF Olu≈ütur
                    </Button>
                    <Button
                      variant="outlined"
                      fullWidth
                      startIcon={<ExportIcon />}
                      onClick={generateReport}
                    >
                      Excel √áƒ±ktƒ±sƒ±
                    </Button>
                  </Box>
                </Box>
              </CardContent>
            </StyledCard>
          </Box>

          {/* Report Templates */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader title="Hazƒ±r Rapor ≈ûablonlarƒ±" />
              <CardContent>
                <List>
                  <ListItem>
                    <ListItemButton onClick={generateReport}>
                      <ListItemIcon>
                        <DashboardIcon color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Aylƒ±k Tetkik √ñzeti"
                        secondary="Bu ay ger√ßekle≈üen t√ºm tetkiklerin √∂zet raporu"
                      />
                    </ListItemButton>
                  </ListItem>
                  <Divider />
                  <ListItem>
                    <ListItemButton onClick={generateReport}>
                      <ListItemIcon>
                        <WarningIcon color="warning" />
                      </ListItemIcon>
                      <ListItemText
                        primary="A√ßƒ±k Bulgular Raporu"
                        secondary="Hen√ºz kapatƒ±lmamƒ±≈ü t√ºm bulgular"
                      />
                    </ListItemButton>
                  </ListItem>
                  <Divider />
                  <ListItem>
                    <ListItemButton onClick={generateReport}>
                      <ListItemIcon>
                        <PendingIcon color="info" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Geciken Aksiyonlar"
                        secondary="Hedef tarihini ge√ßen aksiyonlar"
                      />
                    </ListItemButton>
                  </ListItem>
                  <Divider />
                  <ListItem>
                    <ListItemButton onClick={generateReport}>
                      <ListItemIcon>
                        <TrendingUpIcon color="success" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Performans Analizi"
                        secondary="Departman bazƒ±nda performans deƒüerlendirmesi"
                      />
                    </ListItemButton>
                  </ListItem>
                  <Divider />
                  <ListItem>
                    <ListItemButton onClick={generateReport}>
                      <ListItemIcon>
                        <CheckIcon color="success" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Uygunluk Raporu"
                        secondary="ISO standartlarƒ±na uygunluk deƒüerlendirmesi"
                      />
                    </ListItemButton>
                  </ListItem>
                </List>
              </CardContent>
            </StyledCard>
          </Box>
        </Box>

        {/* Report Statistics */}
        <Box mt={3}>
          <StyledCard>
            <CardHeader title="Rapor ƒ∞statistikleri" />
            <CardContent>
              <Box display="grid" gridTemplateColumns="repeat(auto-fit, minmax(200px, 1fr))" gap={2}>
                <Box textAlign="center" p={2}>
                  <Typography variant="h4" color="primary">
                    {auditPlans.length}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Toplam Tetkik
                  </Typography>
                </Box>
                <Box textAlign="center" p={2}>
                  <Typography variant="h4" color="success.main">
                    {auditPlans.filter(p => p.status === 'completed').length}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Tamamlanan Tetkik
                  </Typography>
                </Box>
                <Box textAlign="center" p={2}>
                  <Typography variant="h4" color="warning.main">
                    {findings.length}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Toplam Bulgu
                  </Typography>
                </Box>
                <Box textAlign="center" p={2}>
                  <Typography variant="h4" color="info.main">
                    {actions.length}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Toplam Aksiyon
                  </Typography>
                </Box>
                <Box textAlign="center" p={2}>
                  <Typography variant="h4" color="error.main">
                    {actions.filter(a => a.status === 'overdue').length}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Geciken Aksiyon
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>
        </Box>
      </Box>
    );
  };

  // ============ SORU Lƒ∞STESƒ∞ Y√ñNETƒ∞M FONKSƒ∞YONLARI ============
  
  // Soru listesi y√∂netim fonksiyonlarƒ±
  const handleCreateQuestionSet = () => {
    setQuestionSetDialogOpen(true);
    setSelectedQuestionSet(null);
    setQuestionSetFormData({
      departmentName: '',
      description: '',
      estimatedDuration: 60,
      questions: []
    });
  };

  const handleViewQuestionSet = (questionSet: DepartmentQuestionSet) => {
    setSelectedQuestionSet(questionSet);
    setQuestionViewDialogOpen(true);
  };

  const handleEditQuestionSet = (questionSet: DepartmentQuestionSet) => {
    setSelectedQuestionSet(questionSet);
    setQuestionSetFormData({
      departmentName: questionSet.departmentName,
      description: questionSet.description,
      estimatedDuration: questionSet.estimatedDuration,
      questions: questionSet.questions
    });
    setQuestionSetDialogOpen(true);
  };

  const handleSaveQuestionSet = () => {
    const newQuestionSet: DepartmentQuestionSet = {
      id: selectedQuestionSet?.id || `qs-${Date.now()}`,
      departmentId: questionSetFormData.departmentName.toLowerCase().replace(/\s+/g, '-'),
      departmentName: questionSetFormData.departmentName,
      version: selectedQuestionSet ? 
        String(parseInt(selectedQuestionSet.version) + 1).padStart(2, '0') : '00',
      effectiveDate: new Date().toISOString().split('T')[0],
      createdBy: 'Sistem Y√∂neticisi',
      questions: questionSetFormData.questions,
      isActive: true,
      description: questionSetFormData.description,
      estimatedDuration: questionSetFormData.estimatedDuration
    };

    if (selectedQuestionSet) {
      setQuestionSets(prev => prev.map(qs => qs.id === selectedQuestionSet.id ? newQuestionSet : qs));
    } else {
      setQuestionSets(prev => [...prev, newQuestionSet]);
    }

    setQuestionSetDialogOpen(false);
    setSnackbarMessage('Soru listesi ba≈üarƒ±yla kaydedildi');
    setSnackbarOpen(true);
  };

  const handleDeleteQuestionSet = (id: string) => {
    setQuestionSets(prev => prev.filter(qs => qs.id !== id));
    setSnackbarMessage('Soru listesi silindi');
    setSnackbarOpen(true);
  };

  const handleCopyQuestionSet = (questionSet: DepartmentQuestionSet) => {
    const copiedQuestionSet: DepartmentQuestionSet = {
      ...questionSet,
      id: `qs-${Date.now()}`,
      departmentName: `${questionSet.departmentName} (Kopya)`,
      version: '00',
      effectiveDate: new Date().toISOString().split('T')[0],
      createdBy: 'Sistem Y√∂neticisi'
    };
    
    setQuestionSets(prev => [...prev, copiedQuestionSet]);
    setSnackbarMessage('Soru listesi kopyalandƒ±');
    setSnackbarOpen(true);
  };

  const handleAddQuestion = () => {
    const newQuestion: AuditQuestion = {
      id: `q-${Date.now()}`,
      questionNumber: `${questionSetFormData.questions.length + 1}`,
      questionText: '',
      category: 'iso9001',
      subcategory: '',
      standardClause: '',
      department: questionSetFormData.departmentName,
      process: [],
      answerType: 'yes_no',
      isRequired: true,
      isCritical: false,
      weight: 3,
      expectedAnswer: 'Evet',
      guidelines: '',
      evidence: [],
      createdBy: 'Sistem Y√∂neticisi',
      createdDate: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      version: '00',
      isActive: true
    };

    setQuestionSetFormData(prev => ({
      ...prev,
      questions: [...prev.questions, newQuestion]
    }));
  };

  const handleUpdateQuestion = (index: number, field: string, value: any) => {
    setQuestionSetFormData(prev => ({
      ...prev,
      questions: prev.questions.map((q, i) => 
        i === index ? { ...q, [field]: value, lastModified: new Date().toISOString() } : q
      )
    }));
  };

  const handleDeleteQuestion = (index: number) => {
    setQuestionSetFormData(prev => ({
      ...prev,
      questions: prev.questions.filter((_, i) => i !== index)
    }));
  };

  const handleCreateNonConformityFromQuestion = (questionId: string, questionText: string) => {
    // Soru bazlƒ± uygunsuzluk olu≈üturma
    const newFinding: Finding = {
      id: `f-${Date.now()}`,
      auditId: activeAuditForm?.auditId || '',
      findingNumber: `F-${new Date().getFullYear()}-${String(findings.length + 1).padStart(3, '0')}`,
      type: 'nonconformity',
      severity: 'minor',
      category: 'Soru Bazlƒ± Uygunsuzluk',
      clause: '',
      requirement: questionText,
      description: `${questionText} sorusuna verilen yanƒ±t uygunsuzluk te≈ükil etmektedir.`,
      evidence: '',
      location: activeAuditForm?.departmentId || '',
      department: activeAuditForm?.departmentId || '',
      process: '',
      discoveredDate: new Date().toISOString().split('T')[0],
      discoveredBy: activeAuditForm?.auditorName || 'Denet√ßi',
      status: 'open',
      priority: 'medium',
      actions: []
    };

    setFindings(prev => [...prev, newFinding]);
    setSnackbarMessage('Uygunsuzluk ba≈üarƒ±yla olu≈üturuldu');
    setSnackbarOpen(true);
  };

  // Soru Listeleri Component
  const QuestionListsComponent = () => {
    return (
      <Box>
        {/* Header */}
        <Box display="flex" justifyContent="flex-end" alignItems="center" mb={3}>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={handleCreateQuestionSet}
            size="large"
          >
            Yeni Soru Listesi
          </Button>
        </Box>

        {/* Statistics Cards */}
        <Box display="grid" gridTemplateColumns="repeat(auto-fit, minmax(200px, 1fr))" gap={2} mb={3}>
          <StyledCard>
            <CardContent>
              <Box display="flex" alignItems="center" gap={2}>
                <Avatar sx={{ bgcolor: 'primary.main' }}>
                  <QuizIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" fontWeight={600}>
                    {questionSets.length}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Toplam Soru Listesi
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>

          <StyledCard>
            <CardContent>
              <Box display="flex" alignItems="center" gap={2}>
                <Avatar sx={{ bgcolor: 'success.main' }}>
                  <ChecklistIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" fontWeight={600}>
                    {questionSets.reduce((total, qs) => total + qs.questions.length, 0)}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Toplam Soru Sayƒ±sƒ±
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>

          <StyledCard>
            <CardContent>
              <Box display="flex" alignItems="center" gap={2}>
                <Avatar sx={{ bgcolor: 'warning.main' }}>
                  <BusinessIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" fontWeight={600}>
                    {new Set(questionSets.map(qs => qs.departmentName)).size}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Kapsanan Departman
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>

          <StyledCard>
            <CardContent>
              <Box display="flex" alignItems="center" gap={2}>
                <Avatar sx={{ bgcolor: 'info.main' }}>
                  <TimeIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" fontWeight={600}>
                    {Math.round(questionSets.reduce((total, qs) => total + qs.estimatedDuration, 0) / questionSets.length) || 0}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    Ort. S√ºre (dk)
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>
        </Box>

        {/* Question Sets List */}
        <StyledCard>
          <CardHeader 
            title="Soru Listeleri"
            avatar={<PlaylistIcon color="primary" />}
          />
          <CardContent>
            {questionSets.length === 0 ? (
              <Box textAlign="center" py={4}>
                <QuizIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
                <Typography variant="h6" color="text.secondary" gutterBottom>
                  Hen√ºz soru listesi olu≈üturulmamƒ±≈ü
                </Typography>
                <Typography variant="body2" color="text.secondary" mb={3}>
                  ƒ∞lk soru listenizi olu≈üturmak i√ßin yukarƒ±daki butonu kullanƒ±n
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<AddIcon />}
                  onClick={handleCreateQuestionSet}
                >
                  ƒ∞lk Soru Listesini Olu≈ütur
                </Button>
              </Box>
            ) : (
              <Box display="grid" gap={2}>
                {questionSets.map((questionSet) => (
                  <Paper
                    key={questionSet.id}
                    variant="outlined"
                    sx={{
                      p: 2,
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        boxShadow: 2,
                        transform: 'translateY(-2px)'
                      }
                    }}
                  >
                    <Box display="flex" justifyContent="space-between" alignItems="start">
                      <Box flex={1}>
                        <Box display="flex" alignItems="center" gap={2} mb={1}>
                          <Typography variant="h6" fontWeight={600}>
                            {questionSet.departmentName}
                          </Typography>
                          <Chip
                            label={`Rev.${questionSet.version.padStart(2, '0')}`}
                            size="small"
                            color="primary"
                            variant="outlined"
                          />
                          <Chip
                            label={questionSet.isActive ? 'Aktif' : 'Pasif'}
                            size="small"
                            color={questionSet.isActive ? 'success' : 'default'}
                          />
                        </Box>
                        
                        <Typography variant="body2" color="text.secondary" mb={2}>
                          {questionSet.description}
                        </Typography>
                        
                        <Box display="flex" gap={3}>
                          <Box display="flex" alignItems="center" gap={1}>
                            <QuizIcon fontSize="small" color="action" />
                            <Typography variant="caption">
                              {questionSet.questions.length} soru
                            </Typography>
                          </Box>
                          <Box display="flex" alignItems="center" gap={1}>
                            <TimeIcon fontSize="small" color="action" />
                            <Typography variant="caption">
                              ~{questionSet.estimatedDuration} dk
                            </Typography>
                          </Box>
                          <Box display="flex" alignItems="center" gap={1}>
                            <CalendarIcon fontSize="small" color="action" />
                            <Typography variant="caption">
                              {new Date(questionSet.effectiveDate).toLocaleDateString('tr-TR')}
                            </Typography>
                          </Box>
                        </Box>
                      </Box>
                      
                      <Box display="flex" gap={1}>
                        <Tooltip title="G√∂r√ºnt√ºle">
                          <IconButton
                            size="small"
                            color="info"
                            onClick={() => {
                              setSelectedQuestionSet(questionSet);
                              setQuestionViewDialogOpen(true);
                            }}
                          >
                            <ViewIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="D√ºzenle">
                          <IconButton
                            size="small"
                            color="primary"
                            onClick={() => handleEditQuestionSet(questionSet)}
                          >
                            <EditIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Kopyala">
                          <IconButton
                            size="small"
                            color="secondary"
                            onClick={() => handleCopyQuestionSet(questionSet)}
                          >
                            <CopyIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Sil">
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => handleDeleteQuestionSet(questionSet.id)}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </Box>
                  </Paper>
                ))}
              </Box>
            )}
          </CardContent>
        </StyledCard>
      </Box>
    );
  };

  // Settings Component
  const SettingsComponent = () => {
    const [emailNotifications, setEmailNotifications] = useState(true);
    const [autoReminders, setAutoReminders] = useState(true);
    const [reportFrequency, setReportFrequency] = useState('monthly');
    const [auditNumberPrefix, setAuditNumberPrefix] = useState('KDM-AUDIT');
    const [findingNumberPrefix, setFindingNumberPrefix] = useState('F');

    const saveSettings = () => {
      setSnackbarMessage('Ayarlar ba≈üarƒ±yla kaydedildi');
      setSnackbarOpen(true);
    };

    return (
      <Box>
        <Box display="flex" flexWrap="wrap" gap={3}>
          {/* General Settings */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader 
                title="Genel Ayarlar" 
                avatar={<SettingsIcon color="primary" />}
              />
              <CardContent>
                <Box display="flex" flexDirection="column" gap={3}>
                  <TextField
                    label="Tetkik Numara √ñn Eki"
                    value={auditNumberPrefix}
                    onChange={(e) => setAuditNumberPrefix(e.target.value)}
                    fullWidth
                    helperText="√ñrnek: KDM-AUDIT-2024-001"
                  />

                  <TextField
                    label="Bulgu Numara √ñn Eki"
                    value={findingNumberPrefix}
                    onChange={(e) => setFindingNumberPrefix(e.target.value)}
                    fullWidth
                    helperText="√ñrnek: F-2024-001"
                  />

                  <FormControl fullWidth>
                    <InputLabel>Rapor Sƒ±klƒ±ƒüƒ±</InputLabel>
                    <Select
                      value={reportFrequency}
                      onChange={(e) => setReportFrequency(e.target.value)}
                      label="Rapor Sƒ±klƒ±ƒüƒ±"
                    >
                      <MenuItem value="weekly">Haftalƒ±k</MenuItem>
                      <MenuItem value="monthly">Aylƒ±k</MenuItem>
                      <MenuItem value="quarterly">√ú√ß Aylƒ±k</MenuItem>
                      <MenuItem value="yearly">Yƒ±llƒ±k</MenuItem>
                    </Select>
                  </FormControl>

                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={emailNotifications}
                        onChange={(e) => setEmailNotifications(e.target.checked)}
                      />
                    }
                    label="E-posta Bildirimleri"
                  />

                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={autoReminders}
                        onChange={(e) => setAutoReminders(e.target.checked)}
                      />
                    }
                    label="Otomatik Hatƒ±rlatmalar"
                  />

                  <Button
                    variant="contained"
                    startIcon={<SaveIcon />}
                    onClick={saveSettings}
                    fullWidth
                  >
                    Ayarlarƒ± Kaydet
                  </Button>
                </Box>
              </CardContent>
            </StyledCard>
          </Box>

          {/* User Management */}
          <Box flex="1 1 400px" minWidth="300px">
            <StyledCard>
              <CardHeader title="Denet√ßi Y√∂netimi" />
              <CardContent>
                <List>
                  {auditors.map((auditor) => (
                    <ListItem key={auditor.id}>
                      <ListItemIcon>
                        <Avatar sx={{ bgcolor: auditor.isActive ? 'success.main' : 'grey.500' }}>
                          <PersonIcon />
                        </Avatar>
                      </ListItemIcon>
                      <ListItemText
                        primary={auditor.name}
                        secondary={
                          <Box>
                            <Typography variant="caption" display="block">
                              {auditor.role === 'lead_auditor' ? 'Ba≈ü Denet√ßi' :
                               auditor.role === 'auditor' ? 'Denet√ßi' :
                               auditor.role === 'observer' ? 'G√∂zlemci' : 'Teknik Uzman'}
                            </Typography>
                            <Typography variant="caption" color="textSecondary">
                              {auditor.department} ‚Ä¢ {auditor.qualifications.join(', ')}
                            </Typography>
                          </Box>
                        }
                      />
                      <Box display="flex" gap={0.5}>
                        <Tooltip title="D√ºzenle">
                          <IconButton size="small" color="primary">
                            <EditIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title={auditor.isActive ? 'Pasifle≈ütir' : 'Aktifle≈ütir'}>
                          <IconButton 
                            size="small" 
                            color={auditor.isActive ? 'warning' : 'success'}
                          >
                            {auditor.isActive ? <PendingIcon fontSize="small" /> : <CheckIcon fontSize="small" />}
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </ListItem>
                  ))}
                </List>
                <Box mt={2}>
                  <Button
                    variant="outlined"
                    startIcon={<AddIcon />}
                    fullWidth
                  >
                    Yeni Denet√ßi Ekle
                  </Button>
                </Box>
              </CardContent>
            </StyledCard>
          </Box>
        </Box>

        {/* System Information */}
        <Box mt={3}>
          <StyledCard>
            <CardHeader title="Sistem Bilgileri" />
            <CardContent>
              <Box display="grid" gridTemplateColumns="repeat(auto-fit, minmax(200px, 1fr))" gap={2}>
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    Sistem S√ºr√ºm√º
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    v2.1.0
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    Son G√ºncelleme
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    15.03.2024
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    Toplam Kullanƒ±cƒ±
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {auditors.length} aktif denet√ßi
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    Veri Tabanƒ± Boyutu
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    2.3 MB
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </StyledCard>
        </Box>
      </Box>
    );
  };

  return (
    <Box sx={{ width: '100%' }}>
      {/* Navigation Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={activeTab}
          onChange={handleTabChange}
          variant={isMobile ? 'scrollable' : 'fullWidth'}
          scrollButtons="auto"
          sx={{
            '& .MuiTab-root': {
              minHeight: 64,
              fontWeight: 600,
            }
          }}
        >
          <Tab
            icon={<DashboardIcon />}
            label="Dashboard"
            iconPosition="start"
          />
          <Tab
            icon={<AuditIcon />}
            label="Tetkik Planlarƒ±"
            iconPosition="start"
          />
          <Tab
            icon={<QuizIcon />}
            label="Soru Listeleri"
            iconPosition="start"
          />
          <Tab
            icon={<WarningIcon />}
            label="Bulgular"
            iconPosition="start"
          />
          <Tab
            icon={<TimelineIcon />}
            label="Aksiyonlar"
            iconPosition="start"
          />
          <Tab
            icon={<ReportIcon />}
            label="Raporlar"
            iconPosition="start"
          />
          <Tab
            icon={<SettingsIcon />}
            label="Ayarlar"
            iconPosition="start"
          />
        </Tabs>
      </Paper>

      {/* Tab Content */}
      <Box sx={{ mt: 2 }}>
        {activeTab === 0 && <Dashboard />}
        {activeTab === 1 && <AuditPlans />}
        {activeTab === 2 && <QuestionListsComponent />}
        {activeTab === 3 && <FindingsComponent />}
        {activeTab === 4 && <ActionsComponent />}
        {activeTab === 5 && <ReportsComponent />}
        {activeTab === 6 && <SettingsComponent />}
      </Box>

      {/* Advanced Dialog for Adding/Editing Audit Plans */}
      <Dialog
        open={dialogOpen}
        onClose={() => setDialogOpen(false)}
        maxWidth="lg"
        fullWidth
        fullScreen={isMobile}
        PaperProps={{
          sx: {
            minHeight: isMobile ? '100vh' : '80vh',
            maxHeight: isMobile ? '100vh' : '90vh'
          }
        }}
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center" gap={2}>
              <AuditIcon color="primary" />
              <Box>
                <Typography variant="h6" fontWeight={600}>
                  {selectedItem ? 'Tetkik Planƒ±nƒ± D√ºzenle' : 'Yeni Tetkik Planƒ± Olu≈ütur'}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {dialogType === 'plan' ? 'Kapsamlƒ± tetkik planƒ±nƒ±zƒ± adƒ±m adƒ±m olu≈üturun' :
                   dialogType === 'finding' ? 'Bulgu Ekle/D√ºzenle' :
                   dialogType === 'action' ? 'Aksiyon Ekle/D√ºzenle' : 'Denet√ßi Ekle/D√ºzenle'}
                </Typography>
              </Box>
            </Box>
            <IconButton onClick={() => setDialogOpen(false)} sx={{ p: 1 }}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent sx={{ p: 0 }}>
          {dialogType === 'plan' && (
            <Box sx={{ height: '100%' }}>
              {/* Professional Stepper Form */}
              <Stepper activeStep={formStep} orientation="vertical" sx={{ p: 3 }}>
                
                {/* Step 1: Temel Bilgiler */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(0)}
                    error={formStep > 0 && !validateStep(0)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Temel Bilgiler
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Tetkik ba≈ülƒ±ƒüƒ±, a√ßƒ±klama ve t√ºr√º
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <TextField
                        fullWidth
                        label="Tetkik Ba≈ülƒ±ƒüƒ±"
                        value={formData.title}
                        onChange={(e) => handleFormDataChange('title', e.target.value)}
                        error={formData.title.trim() === ''}
                        helperText={formData.title.trim() === '' ? 'Tetkik ba≈ülƒ±ƒüƒ± zorunludur' : ''}
                        placeholder="√ñrn: Q1 2024 ƒ∞√ß Tetkik - √úretim Departmanƒ±"
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <DescriptionIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />
                      
                      <TextField
                        fullWidth
                        label="Tetkik A√ßƒ±klamasƒ±"
                        value={formData.description}
                        onChange={(e) => handleFormDataChange('description', e.target.value)}
                        multiline
                        rows={3}
                        error={formData.description.trim() === ''}
                        helperText={formData.description.trim() === '' ? 'A√ßƒ±klama zorunludur' : 'Tetki amacƒ± ve genel kapsamƒ±nƒ± a√ßƒ±klayƒ±n'}
                        placeholder="Tetkikin amacƒ±, kapsamƒ± ve beklenen sonu√ßlarƒ±nƒ± detaylƒ± olarak a√ßƒ±klayƒ±n..."
                      />
                      
                      <FormControl fullWidth>
                        <InputLabel>Tetkik T√ºr√º</InputLabel>
                        <Select
                          value={formData.auditType}
                          onChange={(e) => handleFormDataChange('auditType', e.target.value)}
                          label="Tetkik T√ºr√º"
                          startAdornment={
                            <InputAdornment position="start">
                              <AuditIcon color="primary" />
                            </InputAdornment>
                          }
                        >
                          {auditTypes.map((type) => (
                            <MenuItem key={type.value} value={type.value}>
                              <Typography>{type.label}</Typography>
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                      
                      <FormControl fullWidth>
                        <InputLabel>√ñncelik D√ºzeyi</InputLabel>
                        <Select
                          value={formData.priority}
                          onChange={(e) => handleFormDataChange('priority', e.target.value)}
                          label="√ñncelik D√ºzeyi"
                          startAdornment={
                            <InputAdornment position="start">
                              <PriorityIcon color="primary" />
                            </InputAdornment>
                          }
                        >
                          <MenuItem value="low">
                            <Chip label="D√º≈ü√ºk" size="small" color="success" sx={{ minWidth: 60 }} />
                          </MenuItem>
                          <MenuItem value="medium">
                            <Chip label="Orta" size="small" color="warning" sx={{ minWidth: 60 }} />
                          </MenuItem>
                          <MenuItem value="high">
                            <Chip label="Y√ºksek" size="small" color="error" sx={{ minWidth: 60 }} />
                          </MenuItem>
                          <MenuItem value="critical">
                            <Chip label="Kritik" size="small" color="error" variant="filled" sx={{ minWidth: 60 }} />
                          </MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 2: Kapsam ve Detaylar */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(1)}
                    error={formStep > 1 && !validateStep(1)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Kapsam ve Detaylar
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Departman, s√ºre√ßler ve kapsam alanlarƒ±
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <FormControl fullWidth>
                        <InputLabel>Departman</InputLabel>
                        <Select
                          value={formData.department}
                          onChange={(e) => handleFormDataChange('department', e.target.value)}
                          label="Departman"
                          error={formData.department === ''}
                          startAdornment={
                            <InputAdornment position="start">
                              <DepartmentIcon color="primary" />
                            </InputAdornment>
                          }
                        >
                          {departments.map((dept) => (
                            <MenuItem key={dept} value={dept}>{dept}</MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                      
                      <Autocomplete
                        multiple
                        options={scopeList}
                        value={formData.scope}
                        onChange={(_, newValue) => handleFormDataChange('scope', newValue)}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Kapsam Alanlarƒ±"
                            error={formData.scope.length === 0}
                            helperText={formData.scope.length === 0 ? 'En az bir kapsam alanƒ± se√ßiniz' : `${formData.scope.length} alan se√ßildi`}
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <>
                                  <InputAdornment position="start">
                                    <ProcessIcon color="primary" />
                                  </InputAdornment>
                                  {params.InputProps.startAdornment}
                                </>
                              ),
                            }}
                          />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Chip
                              label={option}
                              size="small"
                              color="primary"
                              variant="outlined"
                              {...getTagProps({ index })}
                            />
                          ))
                        }
                      />
                      
                      <Autocomplete
                        multiple
                        options={processList}
                        value={formData.process}
                        onChange={(_, newValue) => handleFormDataChange('process', newValue)}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="ƒ∞lgili S√ºre√ßler"
                            error={formData.process.length === 0}
                            helperText={formData.process.length === 0 ? 'En az bir s√ºre√ß se√ßiniz' : `${formData.process.length} s√ºre√ß se√ßildi`}
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <>
                                  <InputAdornment position="start">
                                    <ProcessIcon color="primary" />
                                  </InputAdornment>
                                  {params.InputProps.startAdornment}
                                </>
                              ),
                            }}
                          />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Chip
                              label={option}
                              size="small"
                              color="secondary"
                              variant="outlined"
                              {...getTagProps({ index })}
                            />
                          ))
                        }
                      />
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 3: Zamanlama ve Standartlar */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(2)}
                    error={formStep > 2 && !validateStep(2)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Zamanlama ve Standartlar
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Tarih, s√ºre ve uygulanacak standartlar
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <TextField
                        fullWidth
                        type="date"
                        label="Planlanan Tarih"
                        value={formData.plannedDate}
                        onChange={(e) => handleFormDataChange('plannedDate', e.target.value)}
                        error={formData.plannedDate === ''}
                        helperText={formData.plannedDate === '' ? 'Tetkik tarihi zorunludur' : ''}
                        InputLabelProps={{ shrink: true }}
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <DateRangeIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />
                      
                      <TextField
                        fullWidth
                        type="number"
                        label="S√ºre (Saat)"
                        value={formData.duration}
                        onChange={(e) => handleFormDataChange('duration', parseInt(e.target.value) || 8)}
                        error={formData.duration <= 0}
                        helperText="Tetkikin tahmini s√ºresi (saat cinsinden)"
                        inputProps={{ min: 1, max: 40 }}
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <ClockIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />
                      
                      <Autocomplete
                        multiple
                        options={standardsList}
                        value={formData.standards}
                        onChange={(_, newValue) => handleFormDataChange('standards', newValue)}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Uygulanacak Standartlar"
                            error={formData.standards.length === 0}
                            helperText={formData.standards.length === 0 ? 'En az bir standart se√ßiniz' : `${formData.standards.length} standart se√ßildi`}
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <>
                                  <InputAdornment position="start">
                                    <StandardIcon color="primary" />
                                  </InputAdornment>
                                  {params.InputProps.startAdornment}
                                </>
                              ),
                            }}
                          />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Chip
                              label={option}
                              size="small"
                              color="info"
                              variant="outlined"
                              {...getTagProps({ index })}
                            />
                          ))
                        }
                      />
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 4: Takƒ±m ve Sorumlu */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(3)}
                    error={formStep > 3 && !validateStep(3)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Denet√ßi Takƒ±mƒ± ve Sorumlu Ki≈üiler
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Denet√ßiler ve denetlenecek ki≈üiler
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Alert severity="info" sx={{ mb: 2 }}>
                        <Typography variant="body2" fontWeight={600} gutterBottom>
                          Denet√ßi Takƒ±mƒ± Se√ßimi
                        </Typography>
                        <Typography variant="caption">
                          Mevcut aktif denet√ßiler arasƒ±ndan tetkik takƒ±mƒ±nƒ± olu≈üturun. 
                          En az bir ba≈ü denet√ßi veya denet√ßi se√ßmelisiniz.
                        </Typography>
                      </Alert>
                      
                      <FormControl fullWidth>
                        <Typography variant="subtitle2" gutterBottom>
                          Denet√ßi Takƒ±mƒ± ({formData.auditorTeam.length} ki≈üi se√ßildi)
                        </Typography>
                        <List sx={{ maxHeight: 200, overflow: 'auto', border: 1, borderColor: 'divider', borderRadius: 1 }}>
                          {auditors.filter(a => a.isActive).map((auditor) => (
                            <ListItem key={auditor.id} dense>
                              <FormControlLabel
                                control={
                                  <Checkbox
                                    checked={formData.auditorTeam.some(member => member.id === auditor.id)}
                                    onChange={(e) => {
                                      if (e.target.checked) {
                                        handleFormDataChange('auditorTeam', [...formData.auditorTeam, auditor]);
                                      } else {
                                        handleFormDataChange('auditorTeam', formData.auditorTeam.filter(member => member.id !== auditor.id));
                                      }
                                    }}
                                  />
                                }
                                label={
                                  <Box display="flex" alignItems="center" gap={1}>
                                    <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>
                                      <PersonIcon fontSize="small" />
                                    </Avatar>
                                    <Box>
                                      <Typography variant="body2" fontWeight={600}>
                                        {auditor.name}
                                      </Typography>
                                      <Typography variant="caption" color="text.secondary">
                                        {auditor.role === 'lead_auditor' ? 'Ba≈ü Denet√ßi' :
                                         auditor.role === 'auditor' ? 'Denet√ßi' :
                                         auditor.role === 'observer' ? 'G√∂zlemci' : 'Teknik Uzman'} - {auditor.department}
                                      </Typography>
                                    </Box>
                                  </Box>
                                }
                              />
                            </ListItem>
                          ))}
                        </List>
                        {formData.auditorTeam.length === 0 && (
                          <Typography variant="caption" color="error" sx={{ mt: 1 }}>
                            En az bir denet√ßi se√ßmelisiniz
                          </Typography>
                        )}
                      </FormControl>
                      
                      <Autocomplete
                        multiple
                        freeSolo
                        options={['Ahmet Yƒ±lmaz', 'Fatma Demir', 'Mehmet √ñzkan', 'Ay≈üe Kaya', 'Osman √áelik']}
                        value={formData.auditees}
                        onChange={(_, newValue) => handleFormDataChange('auditees', newValue)}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Denetlenecek Ki≈üiler"
                            helperText="ƒ∞sim yazarak yeni ki≈üi ekleyebilir veya mevcut listeden se√ßebilirsiniz"
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <>
                                  <InputAdornment position="start">
                                    <PersonIcon color="primary" />
                                  </InputAdornment>
                                  {params.InputProps.startAdornment}
                                </>
                              ),
                            }}
                          />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Chip
                              label={option}
                              size="small"
                              color="default"
                              variant="outlined"
                              {...getTagProps({ index })}
                            />
                          ))
                        }
                      />
                    </Box>
                  </StepContent>
                </Step>
              </Stepper>
            </Box>
          )}
          
          {/* Finding Dialog */}
          {dialogType === 'finding' && (
            <Box>
              <Stepper activeStep={formStep} orientation="vertical">
                {/* Step 1: Bulgu Temel Bilgileri */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(0)}
                    error={formStep > 0 && !validateStep(0)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Bulgu Temel Bilgileri
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Bulgu t√ºr√º, numarasƒ± ve a√ßƒ±klama
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Bulgu Numarasƒ±"
                          value={formData.findingNumber}
                          onChange={(e) => handleFormDataChange('findingNumber', e.target.value)}
                          required
                          placeholder="√ñr: BGU-2024-001"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <NumbersIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />
                        
                        <FormControl required>
                          <InputLabel>Bulgu T√ºr√º</InputLabel>
                          <Select
                            value={formData.type}
                            onChange={(e) => handleFormDataChange('type', e.target.value)}
                            label="Bulgu T√ºr√º"
                          >
                            <MenuItem value="nonconformity">Uygunsuzluk</MenuItem>
                            <MenuItem value="improvement_opportunity">ƒ∞yile≈ütirme Fƒ±rsatƒ±</MenuItem>
                            <MenuItem value="positive_finding">Olumlu Bulgu</MenuItem>
                            <MenuItem value="observation">G√∂zlem</MenuItem>
                          </Select>
                        </FormControl>
                      </Box>

                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <FormControl required>
                          <InputLabel>√ñnem Derecesi</InputLabel>
                          <Select
                            value={formData.severity}
                            onChange={(e) => handleFormDataChange('severity', e.target.value)}
                            label="√ñnem Derecesi"
                          >
                            <MenuItem value="major">Maj√∂r</MenuItem>
                            <MenuItem value="minor">Min√∂r</MenuItem>
                            <MenuItem value="observation">G√∂zlem</MenuItem>
                          </Select>
                        </FormControl>

                        <TextField
                          label="Kategori"
                          value={formData.category}
                          onChange={(e) => handleFormDataChange('category', e.target.value)}
                          required
                          placeholder="√ñr: Dok√ºman Kontrol√º"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <CategoryIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Box>

                      <TextField
                        label="Bulgu A√ßƒ±klamasƒ±"
                        value={formData.description}
                        onChange={(e) => handleFormDataChange('description', e.target.value)}
                        required
                        multiline
                        rows={4}
                        placeholder="Bulgunu detaylƒ± olarak a√ßƒ±klayƒ±n..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <DescriptionIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 2: Standart ve Gereksinimler */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(1)}
                    error={formStep > 1 && !validateStep(1)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Standart ve Gereksinimler
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      ƒ∞lgili standart maddeleri ve gereksinimler
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Standart Maddesi"
                          value={formData.clause}
                          onChange={(e) => handleFormDataChange('clause', e.target.value)}
                          required
                          placeholder="√ñr: ISO 9001:2015 - 8.5.1"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <ArticleIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />

                        <FormControl required>
                          <InputLabel>Departman</InputLabel>
                          <Select
                            value={formData.department}
                            onChange={(e) => handleFormDataChange('department', e.target.value)}
                            label="Departman"
                          >
                            <MenuItem value="√úretim">√úretim</MenuItem>
                            <MenuItem value="Kalite">Kalite</MenuItem>
                            <MenuItem value="Satƒ±n Alma">Satƒ±n Alma</MenuItem>
                            <MenuItem value="ƒ∞K">ƒ∞nsan Kaynaklarƒ±</MenuItem>
                            <MenuItem value="√áevre">√áevre</MenuItem>
                            <MenuItem value="ƒ∞SG">ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi</MenuItem>
                            <MenuItem value="Ar-Ge">Ar-Ge</MenuItem>
                            <MenuItem value="Pazarlama">Pazarlama</MenuItem>
                            <MenuItem value="Finans">Finans</MenuItem>
                            <MenuItem value="Bilgi ƒ∞≈ülem">Bilgi ƒ∞≈ülem</MenuItem>
                            <MenuItem value="Genel M√ºd√ºrl√ºk">Genel M√ºd√ºrl√ºk</MenuItem>
                          </Select>
                        </FormControl>
                      </Box>

                      <TextField
                        label="Gereksinim/Kriter"
                        value={formData.requirement}
                        onChange={(e) => handleFormDataChange('requirement', e.target.value)}
                        required
                        multiline
                        rows={3}
                        placeholder="ƒ∞lgili standardƒ±n gereksinimini yazƒ±n..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <AssignmentIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />

                      <TextField
                        label="Kanƒ±t/Delil"
                        value={formData.evidence}
                        onChange={(e) => handleFormDataChange('evidence', e.target.value)}
                        required
                        multiline
                        rows={3}
                        placeholder="Bulgunu destekleyen kanƒ±tlarƒ± yazƒ±n..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <FindInPageIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 3: Lokasyon ve Sorumlu */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(2)}
                    error={formStep > 2 && !validateStep(2)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Lokasyon ve Sorumlu Bilgileri
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      Bulgunun ke≈üfedildiƒüi yer ve sorumlu ki≈üiler
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Lokasyon/Yer"
                          value={formData.location}
                          onChange={(e) => handleFormDataChange('location', e.target.value)}
                          required
                          placeholder="√ñr: √úretim Sahasƒ± - A Blok"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <LocationOnIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />

                        <TextField
                          label="S√ºre√ß"
                          value={formData.process}
                          onChange={(e) => handleFormDataChange('process', e.target.value)}
                          required
                          placeholder="√ñr: Kaynak ƒ∞≈ülemi"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <SettingsIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Box>

                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Ke≈üif Tarihi"
                          type="date"
                          value={formData.discoveredDate}
                          onChange={(e) => handleFormDataChange('discoveredDate', e.target.value)}
                          required
                          InputLabelProps={{
                            shrink: true,
                          }}
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <DateRangeIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />

                        <TextField
                          label="Ke≈üfeden Ki≈üi"
                          value={formData.discoveredBy}
                          onChange={(e) => handleFormDataChange('discoveredBy', e.target.value)}
                          required
                          placeholder="Denet√ßi adƒ±"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <PersonIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Box>

                      <FormControl required>
                        <InputLabel>√ñncelik D√ºzeyi</InputLabel>
                        <Select
                          value={formData.priority}
                          onChange={(e) => handleFormDataChange('priority', e.target.value)}
                          label="√ñncelik D√ºzeyi"
                        >
                          <MenuItem value="low">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="success" label="D√º≈ü√ºk" />
                              <Typography variant="body2">30 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="medium">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="warning" label="Orta" />
                              <Typography variant="body2">15 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="high">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="error" label="Y√ºksek" />
                              <Typography variant="body2">7 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="critical">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="error" label="Kritik" />
                              <Typography variant="body2">Derhal</Typography>
                            </Box>
                          </MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </StepContent>
                </Step>
              </Stepper>
            </Box>
          )}

          {/* Action Dialog */}
          {dialogType === 'action' && (
            <Box>
              <Alert severity="info" sx={{ mb: 2, bgcolor: 'primary.50', border: 1, borderColor: 'primary.200' }}>
                <Typography variant="body2" fontWeight={600} gutterBottom>
                  Aksiyon Atamasƒ± ve Takibi
                </Typography>
                <Typography variant="caption">
                  Bulgulara kar≈üƒ± alƒ±nacak √∂nleyici/d√ºzeltici aksiyonlarƒ± planlayƒ±n, sorumlularƒ±nƒ± atayƒ±n ve takip edin.
                  T√ºm adƒ±mlarƒ± tamamlayarak profesyonel aksiyon planƒ± olu≈üturun.
                </Typography>
              </Alert>
              
              <Stepper activeStep={formStep} orientation="vertical">
                {/* Step 1: Aksiyon Temel Bilgileri */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(0)}
                    error={formStep > 0 && !validateStep(0)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Aksiyon Temel Bilgileri
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Aksiyon numarasƒ±, t√ºr√º ve detaylƒ± a√ßƒ±klama
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Aksiyon Numarasƒ±"
                          value={formData.actionNumber}
                          onChange={(e) => handleFormDataChange('actionNumber', e.target.value)}
                          required
                          placeholder="√ñr: AKS-2024-001"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                                                 <AssignmentIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />

                        <FormControl required>
                          <InputLabel>Aksiyon T√ºr√º</InputLabel>
                          <Select
                            value={formData.actionType}
                            onChange={(e) => handleFormDataChange('actionType', e.target.value)}
                            label="Aksiyon T√ºr√º"
                          >
                            <MenuItem value="corrective">
                              <Box display="flex" alignItems="center" gap={1}>
                                <Chip size="small" color="error" label="D√ºzeltici" />
                                <Typography variant="body2">Mevcut hatayƒ± d√ºzelt</Typography>
                              </Box>
                            </MenuItem>
                            <MenuItem value="preventive">
                              <Box display="flex" alignItems="center" gap={1}>
                                <Chip size="small" color="warning" label="√ñnleyici" />
                                <Typography variant="body2">Gelecekteki hatayƒ± √∂nle</Typography>
                              </Box>
                            </MenuItem>
                            <MenuItem value="improvement">
                              <Box display="flex" alignItems="center" gap={1}>
                                <Chip size="small" color="success" label="ƒ∞yile≈ütirme" />
                                <Typography variant="body2">S√ºreci geli≈ütir</Typography>
                              </Box>
                            </MenuItem>
                          </Select>
                        </FormControl>
                      </Box>

                      <TextField
                        label="Detaylƒ± Aksiyon A√ßƒ±klamasƒ±"
                        value={formData.actionDescription}
                        onChange={(e) => handleFormDataChange('actionDescription', e.target.value)}
                        required
                        multiline
                        rows={4}
                        placeholder="Alƒ±nacak aksiyonun detaylƒ± a√ßƒ±klamasƒ±..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <DescriptionIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />

                      <FormControl required>
                        <InputLabel>√ñncelik D√ºzeyi</InputLabel>
                        <Select
                          value={formData.priority}
                          onChange={(e) => handleFormDataChange('priority', e.target.value)}
                          label="√ñncelik D√ºzeyi"
                        >
                          <MenuItem value="low">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="success" label="D√º≈ü√ºk" />
                              <Typography variant="body2">60 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="medium">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="warning" label="Orta" />
                              <Typography variant="body2">30 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="high">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="error" label="Y√ºksek" />
                              <Typography variant="body2">15 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                          <MenuItem value="critical">
                            <Box display="flex" alignItems="center" gap={1}>
                              <Chip size="small" color="error" label="Kritik" />
                              <Typography variant="body2">7 g√ºn i√ßinde</Typography>
                            </Box>
                          </MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 2: Sorumlu ve Zamanlama */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(1)}
                    error={formStep > 1 && !validateStep(1)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Sorumlu ve Zamanlama
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Sorumlu ki≈üi, hedef tarih ve beklenen sonu√ß
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <Autocomplete
                        options={departments.map(dept => `${dept} Sorumlusu`)}
                        freeSolo
                        value={formData.responsible}
                        onChange={(event, newValue) => {
                          handleFormDataChange('responsible', newValue || '');
                        }}
                        onInputChange={(event, newInputValue) => {
                          handleFormDataChange('responsible', newInputValue);
                        }}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Sorumlu Ki≈üi/Departman"
                            required
                            placeholder="Aksiyon sorumlusu se√ßin veya yazƒ±n"
                            InputProps={{
                              ...params.InputProps,
                              startAdornment: (
                                <InputAdornment position="start">
                                  <PersonIcon color="primary" />
                                </InputAdornment>
                              ),
                            }}
                          />
                        )}
                      />

                      <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                        <TextField
                          label="Hedef Tamamlanma Tarihi"
                          type="date"
                          value={formData.targetDate}
                          onChange={(e) => handleFormDataChange('targetDate', e.target.value)}
                          required
                          InputLabelProps={{
                            shrink: true,
                          }}
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                <DateRangeIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />

                        <TextField
                          label="B√ºt√ße (TL)"
                          type="number"
                          value={formData.budget}
                          onChange={(e) => handleFormDataChange('budget', Number(e.target.value))}
                          placeholder="0"
                          InputProps={{
                            startAdornment: (
                              <InputAdornment position="start">
                                                                 <AttachIcon color="primary" />
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Box>

                      <TextField
                        label="Beklenen Sonu√ß"
                        value={formData.expectedResult}
                        onChange={(e) => handleFormDataChange('expectedResult', e.target.value)}
                        required
                        multiline
                        rows={3}
                        placeholder="Bu aksiyondan beklenen somut sonu√ßlar..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                                                             <StarIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />

                      <TextField
                        label="Risk Deƒüerlendirmesi"
                        value={formData.riskAssessment}
                        onChange={(e) => handleFormDataChange('riskAssessment', e.target.value)}
                        multiline
                        rows={2}
                        placeholder="Aksiyonla ilgili riskler ve √∂nlemler..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <WarningIcon color="warning" />
                            </InputAdornment>
                          ),
                        }}
                      />
                    </Box>
                  </StepContent>
                </Step>

                {/* Step 3: Kaynak ve Doƒürulama */}
                <Step>
                  <StepLabel 
                    icon={getStepIcon(2)}
                    error={formStep > 2 && !validateStep(2)}
                  >
                    <Typography variant="h6" fontWeight={600}>
                      Kaynak ve Doƒürulama
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Gerekli kaynaklar ve etkinlik doƒürulama y√∂ntemi
                    </Typography>
                  </StepLabel>
                  <StepContent>
                    <Box sx={{ display: 'grid', gap: 3, mb: 3 }}>
                      <TextField
                        label="Gerekli Kaynaklar"
                        value={formData.resources}
                        onChange={(e) => handleFormDataChange('resources', e.target.value)}
                        required
                        multiline
                        rows={3}
                        placeholder="ƒ∞nsan kaynaƒüƒ±, malzeme, ekipman, eƒüitim vb..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                                                             <SettingsIcon color="primary" />
                            </InputAdornment>
                          ),
                        }}
                      />

                      <Box display="grid" gridTemplateColumns="auto 1fr" gap={2} alignItems="center">
                        <FormControlLabel
                          control={
                            <Switch
                              checked={formData.verificationRequired}
                              onChange={(e) => handleFormDataChange('verificationRequired', e.target.checked)}
                              color="primary"
                            />
                          }
                          label="Etkinlik Doƒürulamasƒ± Gerekli"
                        />
                      </Box>

                      {formData.verificationRequired && (
                        <>
                          <TextField
                            label="Doƒürulama Y√∂ntemi"
                            value={formData.verificationMethod}
                            onChange={(e) => handleFormDataChange('verificationMethod', e.target.value)}
                            required
                            multiline
                            rows={2}
                            placeholder="Nasƒ±l doƒürulanacak? (Test, g√∂zlem, √∂l√ß√ºm, inceleme vb.)"
                            InputProps={{
                              startAdornment: (
                                <InputAdornment position="start">
                                  <VerifiedIcon color="success" />
                                </InputAdornment>
                              ),
                            }}
                          />

                          <Box display="grid" gridTemplateColumns="1fr 1fr" gap={2}>
                            <TextField
                              label="Doƒürulama Tarihi"
                              type="date"
                              value={formData.verificationDate}
                              onChange={(e) => handleFormDataChange('verificationDate', e.target.value)}
                              InputLabelProps={{
                                shrink: true,
                              }}
                              InputProps={{
                                startAdornment: (
                                  <InputAdornment position="start">
                                                                         <CalendarIcon color="primary" />
                                  </InputAdornment>
                                ),
                              }}
                            />

                            <TextField
                              label="Doƒürulama Sorumlusu"
                              value={formData.verificationBy}
                              onChange={(e) => handleFormDataChange('verificationBy', e.target.value)}
                              placeholder="Doƒürulama yapacak ki≈üi"
                              InputProps={{
                                startAdornment: (
                                  <InputAdornment position="start">
                                    <PersonIcon color="primary" />
                                  </InputAdornment>
                                ),
                              }}
                            />
                          </Box>
                        </>
                      )}

                      <TextField
                        label="Ba≈üarƒ± Kriterleri"
                        value={formData.successCriteria}
                        onChange={(e) => handleFormDataChange('successCriteria', e.target.value)}
                        required
                        multiline
                        rows={3}
                        placeholder="Aksiyonun ba≈üarƒ±lƒ± olduƒüu nasƒ±l anla≈üƒ±lacak? √ñl√ß√ºlebilir kriterler..."
                        InputProps={{
                          startAdornment: (
                            <InputAdornment position="start">
                              <TrendingUpIcon color="success" />
                            </InputAdornment>
                          ),
                        }}
                      />
                    </Box>
                  </StepContent>
                </Step>
              </Stepper>
            </Box>
          )}
        </DialogContent>
        
        <DialogActions sx={{ p: 3, borderTop: 1, borderColor: 'divider' }}>
          {(dialogType === 'plan' || dialogType === 'finding' || dialogType === 'action') && (
            <Box display="flex" justifyContent="space-between" width="100%">
              <Button
                variant="outlined"
                onClick={handlePrevStep}
                disabled={formStep === 0}
                startIcon={<ExpandMoreIcon sx={{ transform: 'rotate(90deg)' }} />}
              >
                √ñnceki
              </Button>
              
              <Box display="flex" gap={1}>
                <Button onClick={() => setDialogOpen(false)}>
                  ƒ∞ptal
                </Button>
                
                {((dialogType === 'plan' && formStep < 3) || 
                  (dialogType === 'finding' && formStep < 2) || 
                  (dialogType === 'action' && formStep < 2)) ? (
                  <Button
                    variant="contained"
                    onClick={handleNextStep}
                    disabled={!validateStep(formStep)}
                    endIcon={<ExpandMoreIcon sx={{ transform: 'rotate(-90deg)' }} />}
                  >
                    Sonraki
                  </Button>
                ) : (
                  <Button
                    variant="contained"
                    onClick={handleSaveItem}
                    disabled={!validateStep(formStep)}
                    startIcon={<SaveIcon />}
                    color="success"
                  >
                    {dialogType === 'plan' ? 'Tetkik Planƒ±nƒ± Kaydet' : 
                     dialogType === 'finding' ? 'Bulguyu Kaydet' : 
                     'Aksiyonu Kaydet'}
                  </Button>
                )}
              </Box>
            </Box>
          )}
        </DialogActions>
      </Dialog>

      {/* Soru Listesi Olu≈üturma/D√ºzenleme Dialog */}
      <Dialog
        open={questionSetDialogOpen}
        onClose={() => setQuestionSetDialogOpen(false)}
        maxWidth="lg"
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center" gap={2}>
              <QuizIcon color="primary" />
              <Box>
                <Typography variant="h6" fontWeight={600}>
                  {selectedQuestionSet ? 'Soru Listesini D√ºzenle' : 'Yeni Soru Listesi Olu≈ütur'}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Departman i√ßin √∂zel tetkik soru listesi olu≈üturun
                </Typography>
              </Box>
            </Box>
            <IconButton onClick={() => setQuestionSetDialogOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent>
          <Box sx={{ p: 2 }}>
            {/* Temel Bilgiler */}
            <Box mb={3}>
              <Typography variant="h6" gutterBottom>Temel Bilgiler</Typography>
              <Box display="grid" gap={2}>
                <TextField
                  label="Departman Adƒ±"
                  value={questionSetFormData.departmentName}
                  onChange={(e) => setQuestionSetFormData(prev => ({...prev, departmentName: e.target.value}))}
                  required
                  fullWidth
                />
                <TextField
                  label="A√ßƒ±klama"
                  value={questionSetFormData.description}
                  onChange={(e) => setQuestionSetFormData(prev => ({...prev, description: e.target.value}))}
                  multiline
                  rows={2}
                  fullWidth
                />
                <TextField
                  label="Tahmini S√ºre (dakika)"
                  type="number"
                  value={questionSetFormData.estimatedDuration}
                  onChange={(e) => setQuestionSetFormData(prev => ({...prev, estimatedDuration: parseInt(e.target.value)}))}
                  fullWidth
                />
              </Box>
            </Box>

            {/* Sorular */}
            <Box>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">Sorular ({questionSetFormData.questions.length})</Typography>
                <Button
                  variant="contained"
                  startIcon={<AddIcon />}
                  onClick={handleAddQuestion}
                  size="small"
                >
                  Soru Ekle
                </Button>
              </Box>
              
              {questionSetFormData.questions
                .map((question, originalIndex) => ({ question, originalIndex }))
                .filter((item, index, self) => 
                  index === self.findIndex(i => i.question.questionNumber === item.question.questionNumber)
                )
                .sort((a, b) => parseInt(a.question.questionNumber) - parseInt(b.question.questionNumber))
                .map(({ question, originalIndex }) => (
                <Paper key={originalIndex} variant="outlined" sx={{ p: 2, mb: 2 }}>
                  <Box display="flex" justifyContent="space-between" alignItems="start" mb={2}>
                    <Typography variant="subtitle2" color="primary" sx={{ fontWeight: 600, minWidth: '80px' }}>
                      Soru {question.questionNumber}
                    </Typography>
                    <IconButton
                      size="small"
                      color="error"
                      onClick={() => handleDeleteQuestion(originalIndex)}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Box>
                  
                  <Box display="grid" gap={2}>
                    <TextField
                      label="Soru Metni"
                      value={question.questionText}
                      onChange={(e) => handleUpdateQuestion(originalIndex, 'questionText', e.target.value)}
                      multiline
                      rows={2}
                      fullWidth
                    />
                    
                    <Box display="grid" gridTemplateColumns="1fr 1fr 1fr" gap={2}>
                      <FormControl>
                        <InputLabel>Kategori</InputLabel>
                        <Select
                          value={question.category}
                          onChange={(e) => handleUpdateQuestion(originalIndex, 'category', e.target.value)}
                          label="Kategori"
                        >
                          <MenuItem value="iso9001">ISO 9001</MenuItem>
                          <MenuItem value="iso14001">ISO 14001</MenuItem>
                          <MenuItem value="iso45001">ISO 45001</MenuItem>
                          <MenuItem value="ts3834">TS 3834</MenuItem>
                          <MenuItem value="general">Genel</MenuItem>
                        </Select>
                      </FormControl>
                      
                      <TextField
                        label="Standart Maddesi"
                        value={question.standardClause}
                        onChange={(e) => handleUpdateQuestion(originalIndex, 'standardClause', e.target.value)}
                      />
                      
                      <FormControl>
                        <InputLabel>Aƒüƒ±rlƒ±k</InputLabel>
                        <Select
                          value={question.weight}
                          onChange={(e) => handleUpdateQuestion(originalIndex, 'weight', e.target.value)}
                          label="Aƒüƒ±rlƒ±k"
                        >
                          <MenuItem value={1}>1 - D√º≈ü√ºk</MenuItem>
                          <MenuItem value={2}>2 - D√º≈ü√ºk-Orta</MenuItem>
                          <MenuItem value={3}>3 - Orta</MenuItem>
                          <MenuItem value={4}>4 - Y√ºksek</MenuItem>
                          <MenuItem value={5}>5 - Kritik</MenuItem>
                        </Select>
                      </FormControl>
                    </Box>
                    
                    <Box display="flex" gap={2}>
                      <FormControlLabel
                        control={
                          <Checkbox
                            checked={question.isRequired}
                            onChange={(e) => handleUpdateQuestion(originalIndex, 'isRequired', e.target.checked)}
                          />
                        }
                        label="Zorunlu"
                      />
                      <FormControlLabel
                        control={
                          <Checkbox
                            checked={question.isCritical}
                            onChange={(e) => handleUpdateQuestion(originalIndex, 'isCritical', e.target.checked)}
                          />
                        }
                        label="Kritik (Uygunsuzluk A√ßma Zorunlu)"
                      />
                    </Box>
                  </Box>
                </Paper>
              ))}
            </Box>
          </Box>
        </DialogContent>
        
        <DialogActions sx={{ p: 3 }}>
          <Button onClick={() => setQuestionSetDialogOpen(false)}>
            ƒ∞ptal
          </Button>
          <Button
            variant="contained"
            onClick={handleSaveQuestionSet}
            startIcon={<SaveIcon />}
          >
            Kaydet
          </Button>
        </DialogActions>
      </Dialog>

      {/* Soru Listesi G√∂r√ºnt√ºleme Dialog */}
      <Dialog
        open={questionViewDialogOpen}
        onClose={() => setQuestionViewDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center" gap={2}>
              <ViewIcon color="primary" />
              <Box>
                <Typography variant="h6" fontWeight={600}>
                  {selectedQuestionSet?.departmentName} - Soru Listesi
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {selectedQuestionSet?.questions.length} soru ‚Ä¢ v{selectedQuestionSet?.version}
                </Typography>
              </Box>
            </Box>
            <IconButton onClick={() => setQuestionViewDialogOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent>
          {selectedQuestionSet && (
            <Box>
              <Box mb={3}>
                <Typography variant="body2" color="text.secondary" mb={2}>
                  {selectedQuestionSet.description}
                </Typography>
                <Box display="flex" gap={2}>
                  <Chip label={`${selectedQuestionSet.questions.length} Soru`} size="small" />
                  <Chip label={`~${selectedQuestionSet.estimatedDuration} dk`} size="small" />
                  <Chip 
                    label={selectedQuestionSet.isActive ? 'Aktif' : 'Pasif'} 
                    size="small" 
                    color={selectedQuestionSet.isActive ? 'success' : 'default'}
                  />
                </Box>
              </Box>
              
              <List>
                {selectedQuestionSet.questions
                  .filter((question, index, self) => 
                    index === self.findIndex(q => q.questionNumber === question.questionNumber)
                  )
                  .sort((a, b) => parseInt(a.questionNumber) - parseInt(b.questionNumber))
                  .map((question, index) => (
                  <ListItem key={question.id} divider>
                    <ListItemText
                      primary={
                        <Box>
                          <Typography variant="subtitle2" color="primary" sx={{ mb: 1, fontWeight: 600 }}>
                            Soru {question.questionNumber}
                          </Typography>
                          <Typography variant="body1" sx={{ lineHeight: 1.6 }}>
                            {question.questionText}
                          </Typography>
                        </Box>
                      }
                      secondary={
                        <Box mt={1}>
                          <Box display="flex" gap={1} mb={1}>
                            <Chip label={question.category.toUpperCase()} size="small" variant="outlined" />
                            <Chip label={question.standardClause} size="small" variant="outlined" />
                            <Chip 
                              label={`Aƒüƒ±rlƒ±k: ${question.weight}`} 
                              size="small" 
                              color={question.weight >= 4 ? 'error' : question.weight >= 3 ? 'warning' : 'default'}
                            />
                            {question.isCritical && (
                              <Chip label="Kritik" size="small" color="error" />
                            )}
                          </Box>
                          {question.guidelines && (
                            <Typography variant="caption" color="text.secondary">
                              Rehber: {question.guidelines}
                            </Typography>
                          )}
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            </Box>
          )}
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setQuestionViewDialogOpen(false)}>
            Kapat
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar for Notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      />
    </Box>
  );
};

export default InternalAuditManagement; 